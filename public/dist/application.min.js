"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["angularFileUpload","angularMoment","ngAnimate","ngCookies","ngMessages","ngResource","LocalStorageModule","pascalprecht.translate","ui.bootstrap","ui.router","ui.utils","angular-loading-bar","toastr"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();
"use strict";angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies).config(["$locationProvider","$httpProvider","$translateProvider",function($locationProvider,$httpProvider,$translateProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$translateProvider.useStaticFilesLoader({prefix:"/locales/",suffix:".json"}),$translateProvider.useLocalStorage().useSanitizeValueStrategy("escapeParameters").registerAvailableLanguageKeys(["en","nl","pt"],{en_US:"en",en_UK:"en",nl_BE:"nl",nl_NL:"nl",pt_BR:"pt",pt_PT:"pt"}).determinePreferredLanguage(),$httpProvider.interceptors.push("authInterceptor")}]).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.hasOwnProperty("roles")){var allowed=!1;toState.data.roles.length&&toState.data.roles.forEach(function(role){if(void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(role)!==-1)return void(allowed=!0)}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])});
"use strict";ApplicationConfiguration.registerModule("admin",["core"]),ApplicationConfiguration.registerModule("admin.artists",["core.admin"]),ApplicationConfiguration.registerModule("admin.artists.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("admin.paintings",["core.admin"]),ApplicationConfiguration.registerModule("admin.paintings.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("admin.users",["core.admin"]),ApplicationConfiguration.registerModule("admin.users.routes",["core.admin.routes"]);
"use strict";ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]);
"use strict";ApplicationConfiguration.registerModule("datasets",["datatables"]);
"use strict";ApplicationConfiguration.registerModule("models",[]);
"use strict";ApplicationConfiguration.registerModule("posts");
"use strict";ApplicationConfiguration.registerModule("process",["users","datasets","models","datatables","ui.bootstrap","dndLists","ui.router.modal"]);
"use strict";ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]);
"use strict";angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]);
"use strict";angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]);
"use strict";angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("not-found"),$stateProvider.state("home",{url:"/",views:{"":{templateUrl:"modules/core/client/views/home.client.view.html"},"posts@home":{templateUrl:"modules/posts/client/list/posts.list.html",controller:"postsListController",controllerAs:"postsList"}}}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html"})}]);
"use strict";!function(){var CarouselCtrl=function($scope){function assignNewIndexesToSlides(indexes){for(var i=0,l=slides.length;i<l;i++)slides[i].id=indexes.pop()}function generateIndexesArray(){for(var indexes=[],i=0;i<currIndex;++i)indexes[i]=i;return shuffle(indexes)}function shuffle(array){var tmp,current,top=array.length;if(top)for(;--top;)current=Math.floor(Math.random()*(top+1)),tmp=array[current],array[current]=array[top],array[top]=tmp;return array}var vm=this;vm.myInterval=5e3,vm.noWrapSlides=!1,vm.active=0;var slides=vm.slides=[],currIndex=0;vm.addSlide=function(){var newWidth=600+slides.length+1;slides.push({image:"http://lorempixel.com/"+newWidth+"/300",text:["Nice image","Awesome photograph","That is so cool","I love that"][slides.length%4],id:currIndex++})},vm.randomize=function(){var indexes=generateIndexesArray();assignNewIndexesToSlides(indexes)};for(var i=0;i<4;i++)vm.addSlide()};angular.module("core").controller("CarouselCtrl",["$scope",CarouselCtrl])}();
"use strict";angular.module("core").controller("HeaderController",["$rootScope","$scope","$state","Authentication","Menus",function($rootScope,$scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),Menus.addMenuItem("topbar",{title:"Home",state:"home",roles:["*"],position:0}),Menus.addMenuItem("topbar",{title:"Finance",state:'posts.search({field: "subject", value: "finance"})',roles:["*"],position:1}),Menus.addMenuItem("topbar",{title:"Datasets",state:"datasets.list",roles:["user"],position:2}),Menus.addMenuItem("topbar",{title:"Models",state:"models.list",roles:["user"],position:3}),Menus.addMenuItem("topbar",{title:"Posts",state:"posts.list",roles:["user"],position:3}),Menus.addMenuItem("topbar",{title:"Users",state:"users.list",roles:["user"],position:5}),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$rootScope.isToggleSideBar=!!$scope.authentication.user,$scope.toggleSideBar=function(){$rootScope.isToggleSideBar=!$rootScope.isToggleSideBar},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]);
"use strict";angular.module("core").controller("HomeController",["$scope","Authentication","posts",function($scope,Authentication,posts){$scope.authentication=Authentication}]);
"use strict";angular.module("core").controller("SideBarCtrl",["$rootScope","$scope","Authentication","Menus",function($rootScope,$scope,Authentication,Menus){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.sidebarMenu=Menus.getMenu("sidebar"),Menus.addMenuItem("sidebar",{title:"Lab",state:"lab.process",type:"item",faIcon:"fa-flask",roles:["user"],position:0}),$scope.$watch(function(){return Authentication.user},function(newVal){newVal&&newVal.hasOwnProperty("_id")&&($rootScope.isToggleSideBar=!0,Menus.addMenuItem("sidebar",{title:"My Posts",state:"users.profilepage.posts({username: '"+newVal.username+"'})",faIcon:"fa-file",roles:["user"],position:1}),Menus.addMenuItem("sidebar",{title:"My Datasets",state:"users.profilepage.datasets({ username: '"+newVal.username+"'})",faIcon:"fa-line-chart",roles:["user"],position:2}),Menus.addMenuItem("sidebar",{title:"My Models",state:"users.profilepage.models({ username: '"+newVal.username+"'})",faIcon:"fa-cogs",roles:["user"],position:3}))})}]);
"use strict";!function(){var changeTheme=function(Authentication){return{restrict:"A",link:function(scope,element,attrs){var link=document.createElement("link");link.rel="stylesheet",angular.element("head").append(link),scope.$watch(function(){return Authentication.user},function(newValue){newValue?link.href="lib/startbootstrap-modern-business-1.0.5/css/modern-business.css":link.href="lib/startbootstrap-landing-page-1.0.5/css/landing-page.css"})}}};angular.module("core").directive("changeTheme",["Authentication",changeTheme])}();
"use strict";!function(){var isNeedContainer=function($rootScope,$window,$timeout){return{restrict:"A",link:function(scope,element,attrs){function toggleContainer(boolVal){boolVal?$timeout(function(){element.addClass("container-fluid").removeClass("container")},400):element.addClass("container").removeClass("container-fluid")}var curState="/"===$window.location.pathname?"home":$window.location.pathname,isToggle=!1;attrs.$observe("isNeedContainer",function(value){isToggle=value}),scope.$watch(function(){return $rootScope.isToggleSideBar},function(newValue){"toggle"!==isToggle&&"home"===curState||toggleContainer(newValue)}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){curState=toState.name,"home"===curState?element.attr("class",""):toggleContainer($rootScope.isToggleSideBar)})}}};angular.module("core").directive("isNeedContainer",["$rootScope","$window","$timeout",isNeedContainer])}();
"use strict";angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]);
"use strict";!function(){var toggleSidebar=function($rootScope,$window){return{restrict:"A",link:function(scope,element,attrs){scope.$watch(function(){return $rootScope.isToggleSideBar},function(newValue){newValue?element.addClass("toggled"):element.removeClass("toggled")}),scope.$watch(function(){return $window.innerWidth},function(newValue){newValue<768&&$rootScope.isToggleSideBar&&($rootScope.isToggleSideBar=!1,element.removeClass("toggled"))})}}};angular.module("core").directive("toggleSidebar",["$rootScope","$window",toggleSidebar])}();
"use strict";!function(){var capitalize=function(){return function(input){function capitalizeString(inputString){return inputString.substring(0,1).toUpperCase()+inputString.substring(1)}if(input){if(input.indexOf(" ")!==-1){var inputPieces,i;for(input=input.toLowerCase(),inputPieces=input.split(" "),i=0;i<inputPieces.length;i++)inputPieces[i]=capitalizeString(inputPieces[i]);return inputPieces.toString().replace(/,/g," ")}return input=input.toLowerCase(),capitalizeString(input)}return""}};angular.module("core").filter("capitalize",["$rootScope","$window",capitalize])}();
"use strict";angular.module("core").service("Menus",["$stateParams","Authentication",function($stateParams,Authentication){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],faIcon:options.faIcon,roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]}),this.addMenu("sidebar",{roles:["user"]})}]);
"use strict";angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]);
"use strict";angular.module("datasets").run(["Menus",function(Menus){}]).constant("datasetOptions",{access:["public","private","paid"]});
"use strict";angular.module("datasets").config(["$stateProvider",function($stateProvider){var MODULE_PATH="modules/datasets/client/";$stateProvider.state("datasets",{"abstract":!0,url:"/datasets",template:"<ui-view/>"}).state("datasets.list",{url:"/",controller:"DatasetsListController",controllerAs:"DatasetsList",templateUrl:MODULE_PATH+"list/datasets.list.html"}).state("datasets.search",{url:"/search/:search",controller:"DatasetsListController",controllerAs:"DatasetsList",templateUrl:MODULE_PATH+"list/datasets.list.html"}).state("datasets.create",{url:"/create",controller:"DatasetsCreateController",controllerAs:"datasetsCreate",templateUrl:MODULE_PATH+"create/datasets.create.html",data:{roles:["user","admin"]}}).state("datasets.workbench",{url:"/workbench/:ds1/:ds2",controller:"WorkbenchController",controllerAs:"Workbench",templateUrl:MODULE_PATH+"workbench/datasets.workbench.html",params:{ds1:{squash:!0,value:null},ds2:{squash:!0,value:null}}}).state("datasets.detail",{url:"/:datasetId",controller:"DatasetsDetailController",controllerAs:"DatasetsDetail",templateUrl:MODULE_PATH+"detail/datasets.detail.html"}).state("datasets.edit",{url:"/:datasetId/edit",controller:"DatasetsEditController",controllerAs:"datasetsEdit",templateUrl:MODULE_PATH+"edit/datasets.edit.html",data:{roles:["user","admin"]}})}]);
"use strict";angular.module("datasets").controller("DatasetsCreateController",["$scope","$state","Authentication","Datasets","datasetOptions","$log","toastr","FileUploader","$window","$timeout",function($scope,$state,Authentication,Datasets,datasetOptions,$log,toastr,FileUploader,$window,$timeout){var vm=this;vm.authentication=Authentication,vm.datasetOptions=datasetOptions,vm.submitted=!1,vm.dataset={access:"public"},vm.create=function(isValid){return vm.error=null,vm.submitted=!0,isValid?vm.dataset.filename&&""!==vm.dataset.filename?void Datasets.create(vm.dataset).then(function(dataset){toastr.success("Dataset created successfully!"),$state.go("users.profilepage.datasets",{username:vm.authentication.user.username})})["catch"](function(err){$log.error(err),toastr.error("Error creating dataset.")}):(toastr.error("You need to upload a dataset .csv file first."),!1):($scope.$broadcast("show-errors-check-validity","datasetsForm"),!1)},$scope.uploader=new FileUploader({url:"/api/datasets/upload"}),$scope.uploader.onWhenAddingFileFailed=function(item,filter,options){toastr.error("Only files with the .csv extension allowed.")},$scope.uploader.filters.push({name:"csvFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|csv|vnd.ms-excel|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(event){$timeout(function(){var csvData={name:fileItem.file.name,file:event.target.result};$scope.upload(csvData)},0)}}},$scope.upload=function(file){vm.success=vm.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue()},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){vm.success=!0,vm.dataset.s3reference=response._id,vm.dataset.filename=response.name,toastr.success(response.name+" uploaded successfully."),$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),vm.error=response.message}}]);
"use strict";angular.module("datasets").controller("DatasetsDetailController",["$stateParams","Datasets","toastr","$log","Authentication",function($stateParams,Datasets,toastr,$log,Authentication){var vm=this;vm.authentication=Authentication,vm.user=vm.authentication.user,vm.columns=[],vm.rows=[],vm.origRows=[],vm.hasLoadedData=!1,vm.totalItems=0,vm.currentPage=1,vm.itemsPerPage=50,vm.pageChanged=function(){vm.rows=_.chain(vm.origRows).slice(vm.itemsPerPage*(vm.currentPage-1)).take(vm.itemsPerPage).value()},Datasets.crud.get({datasetId:$stateParams.datasetId}).$promise.then(function(dataset){vm.dataset=dataset}),Datasets.getDatasetWithS3($stateParams.datasetId).then(function(data){vm.columns=data.columns,vm.origRows=data.rows,vm.totalItems=vm.origRows.length,vm.rows=_.take(vm.origRows,vm.itemsPerPage),vm.hasLoadedData=!0}),vm.addtoUser=function(viewingDataset){Datasets.addToUserApiCall(viewingDataset).then(function(dataset){toastr.success("Dataset copied to your LAB.")})["catch"](function(err){$log.error(err),toastr.error("An error occurred while copying the dataset.")})},vm.mergeDataset=function(){_.has(vm,"selectedDatasetOption")&&_.has(vm.selectedDatasetOption,"_id")?(vm.hasLoadedData=!1,Datasets.getDatasetWithS3(vm.selectedDatasetOption._id).then(function(data){vm.selectedDatasetColumns=data.columns,vm.selectedDatasetRows=data.rows,console.log(vm.selectedDatasetRows,vm.selectedDatasetColumns),vm.hasLoadedData=!0})):alert("select a valid dataset")}}]);
"use strict";angular.module("datasets").controller("DatasetsDetailModalController",["$modalInstance","Datasets","viewingDataset","toastr","$log","Authentication",function($modalInstance,Datasets,viewingDataset,toastr,$log,Authentication){var vm=this;vm.viewingDataset=viewingDataset,vm.authentication=Authentication,vm.columns=[],vm.rows=[],vm.hasLoadedData=!1,Datasets.getDatasetWithS3(viewingDataset._id).then(function(data){vm.columns=data.columns,vm.rows=data.rows,vm.hasLoadedData=!0}),vm.ok=function(){$modalInstance.close(!0)},vm.cancel=function(){$modalInstance.dismiss(!1)},vm.addtoUser=function(){Datasets.addToUserApiCall(viewingDataset).then(function(dataset){$modalInstance.close(!0),toastr.success("Dataset copied to your LAB.")})["catch"](function(err){$log.error(err),toastr.error("An error occurred while copying the dataset.")})},vm.mergeDataset=function(){_.has(vm,"selectedDatasetOption")&&_.has(vm.selectedDatasetOption,"_id")?(vm.hasLoadedData=!1,Datasets.getDatasetWithS3(vm.selectedDatasetOption._id).then(function(data){vm.selectedDatasetColumns=data.columns,vm.selectedDatasetRows=data.rows,console.log(vm.selectedDatasetRows,vm.selectedDatasetColumns),vm.hasLoadedData=!0})):alert("select a valid dataset")}}]);
"use strict";angular.module("datasets").directive("datasetTable",[function(){var baseTpl='   <table class="table table-striped table-bordered">';baseTpl+="    <thead>",baseTpl+="        {{#each columns}}",baseTpl+="\t        \t<th>{{this}}</th>",baseTpl+="        {{/each}}",baseTpl+="    </thead>",baseTpl+="    <tbody>",baseTpl+="      {{> rows}}",baseTpl+="    </tbody>",baseTpl+="  </table>";var partial="  {{#each rows}}";partial+="    <tr>",partial+="\t\t  {{#each ../columns}}",partial+="\t\t\t  <td>{{lookup ../this this}}</td>",partial+="\t\t  {{/each}}",partial+="    </tr>",partial+=" {{/each}}";var tpl=Handlebars.compile(baseTpl);return Handlebars.registerPartial("rows",partial),{restrict:"E",scope:{rows:"=",columns:"="},link:function($scope,element){$scope.$watchGroup(["columns","rows"],function(newData){newData[0]&&newData[1]&&newData[0].length&&newData[1].length?element.html(tpl({columns:newData[0],rows:newData[1]})):element.html("")})}}}]);
"use strict";angular.module("datasets").controller("DatasetsEditController",["$stateParams","Datasets","UsersFactory","Authentication","datasetOptions","toastr","$log","$state","$scope",function($stateParams,Datasets,UsersFactory,Authentication,datasetOptions,toastr,$log,$state,$scope){var vm=this;vm.authentication=Authentication,vm.user=Authentication.user,vm.datasetOptions=datasetOptions,Datasets.crud.get({datasetId:$stateParams.datasetId}).$promise.then(function(dataset){vm.dataset=dataset,vm.user._id!==vm.dataset.user._id&&(toastr.error("You do not have access to edit this dataset."),$state.go("users.profilepage.datasets",{username:vm.user.username}))}),vm.update=function(isValid){return vm.error=null,vm.submitted=!0,isValid?void Datasets.update(vm.dataset).then(function(dataset){toastr.success("Dataset update successfully!"),$state.go("users.profilepage.datasets",{username:vm.authentication.user.username})})["catch"](function(err){$log.error(err),toastr.error("Error creating dataset.")}):($scope.$broadcast("show-errors-check-validity","datasetsForm"),!1)}}]);
"use strict";angular.module("datasets").controller("DatasetsListController",["$state","$stateParams","$sce","$modal","Authentication","Datasets","UsersFactory","toastr","$log",function($state,$stateParams,$sce,$modal,Authentication,Datasets,UsersFactory,toastr,$log){function loadSearchData(){Datasets.search(vm.q,vm.itemsPerPage,vm.currentPage).success(function(response){vm.list=response.datasets,vm.totalItems=response.count,vm.loaded()}).error(function(error){vm.loaded()})}var vm=this;vm.authentication=Authentication,vm.user=Authentication.user,vm.resolved=!1,vm.loading=!1,vm.totalItems=0,vm.currentPage=1,vm.itemsPerPage=50,vm.pageChanged=function(){loadSearchData()},vm.ownership=UsersFactory.ownership(),vm.showCreate="datasets.list"==$state.current.name||"datasets.search"==$state.current.name,vm.myDatasets="users.profilepage.datasets"==$state.current.name,vm.load=function(){vm.resolved=!1,vm.loading=!0},vm.loaded=function(){vm.resolved=!0,vm.loading=!1},$stateParams.search&&(vm.q=$stateParams.search,loadSearchData()),vm.deleteDataset=function(dataset){vm.user._id!==dataset.user._id&&vm.user._id!==dataset.user||Datasets.remove(dataset).then(function(){vm.list=_.without(vm.list,dataset),toastr.success("Dataset deleted successfully.")})["catch"](function(err){$log.error(err),toastr.error("Error deleting dataset.")})},vm.filterData=function(field,value){vm.load(),Datasets.filter(field,value).then(function(res){vm.list=res.data,vm.loaded()},function(err){vm.loaded()})},vm.state=$state.current.name,"datasets.filter"===vm.state?vm.filterData($stateParams.field,$stateParams.value):"users.profilepage.datasets"===vm.state&&(vm.load(),Datasets.user($stateParams.username).then(function(res){vm.list=res.data,vm.loaded()},function(err){vm.loaded()})),vm.search=function(){vm.q&&""!==vm.q?$state.go("datasets.search",{search:vm.q}):toastr.error("You need to enter a word or phrases to search by.")},vm.showTitle=function(title){var q=vm.q,matcher=new RegExp(q,"gi"),highlightedTitle=title.replace(matcher,'<span class="matched">$&</span>');return $sce.trustAsHtml(highlightedTitle)},vm.addToUser=function(dataset){Datasets.addToUserApiCall(dataset).then(function(data){toastr.success("Dataset copied to your LAB.")})["catch"](function(err){$log.error(err),toastr.error("An error occurred while copying the dataset.")})},vm.showData=function(dataset){$modal.open({templateUrl:"modules/datasets/client/detail/datasets.detail.modal.html",controller:"DatasetsDetailModalController",controllerAs:"DatasetDetailModal",size:"md",resolve:{viewingDataset:dataset}})}}]);
"use strict";angular.module("datasets").factory("Datasets",["$resource","$http","$q",function($resource,$http,$q){function crud(){return $resource("api/datasets/:datasetId",{studentId:"@_id"},{update:{method:"PUT"}})}function create(dataset){var dfd=$q.defer();return $http.post("/api/datasets",dataset).success(function(data,status,headers,config){dfd.resolve(data)}).error(function(data,status,headers,config){dfd.reject(data)}),dfd.promise}function update(dataset){var dfd=$q.defer();return $http.put("/api/datasets/"+dataset._id,dataset).success(function(data,status,headers,config){dfd.resolve(data)}).error(function(data,status,headers,config){dfd.reject(data)}),dfd.promise}function remove(dataset){var dfd=$q.defer();return $http["delete"]("/api/datasets/"+dataset._id).success(function(data,status,headers,config){dfd.resolve(data)}).error(function(data,status,headers,config){dfd.reject(data)}),dfd.promise}function user(username){return $http({url:"api/datasets/user/"+username,method:"GET"})}function filter(field,value){return $http({url:"api/datasets/filter/"+field+"/"+value,method:"GET"})}function search(q,itemsPerPage,currentPage){return $http({url:"api/datasets/search?q="+q+"&itemsPerPage="+itemsPerPage+"&currentPage="+currentPage,method:"GET"})}function addToUserApiCall(dataset){var dfd=$q.defer();return $http.post("api/datasets/copy",dataset).success(function(data,status,headers,config){dfd.resolve(data)}).error(function(data,status,headers,config){dfd.reject(data)}),dfd.promise}function getDatasetWithS3(datasetId){return $http({url:"api/datasets/"+datasetId+"/withs3",method:"GET"}).then(function(res){return res.data},function(err){console.error(err)})}function saveCustom(dataset){return $http({url:"/api/datasets/saveCustom",data:dataset,method:"POST"}).then(function(res){return res.data},function(err){console.log(err)})}function mergeColumns(data){return $http({url:"/api/datasets/merge",data:data,method:"POST"}).then(function(res){return res.data},function(err){console.error(err)})}function insert(data){return $http({url:"/api/datasets/insert",data:data,method:"POST"}).then(function(res){return res.data})}return{crud:crud(),create:create,update:update,remove:remove,search:search,filter:filter,addToUserApiCall:addToUserApiCall,getDatasetWithS3:getDatasetWithS3,saveCustom:saveCustom,mergeColumns:mergeColumns,insert:insert,user:user}}]);
"use strict";angular.module("datasets").controller("WorkbenchActionModalCtrl",["$scope","$modalInstance","modalData","Datasets",function($scope,$modalInstance,modalData,Datasets){function compareName(){if(vm.modalTableData.title){var name=getModalFormData().name;vm.isNameNotChange=vm.modalTableData.title===name}}function getModalFormData(){return{name:vm.mergeParams.tableName?vm.mergeParams.tableName.replace(/<\/?[^>]+(>|$)/g,""):"",note:vm.mergeParams.hasOwnProperty("notes")?vm.mergeParams.notes.replace(/<\/?[^>]+(>|$)/g,""):""}}function mergeColumns(params){return Datasets.mergeColumns(params).then(function(data){return data})}function saveDataset(params){return Datasets.saveCustom(params).then(function(data){return console.log(data),data},function(err){console.warn(err)})}function isDataCorrect(data){return data.hasOwnProperty("columns")&&data.columns.length>0}var vm=this;switch(vm.actionForm=$scope.actionForm,vm.modalType=modalData.type,vm.modalTableData=modalData.tableData,vm.modalOperationData=modalData.operationData,vm.infoText="Table complete",vm.columns=[],vm.rows=[],vm.mergeParams={},vm.hasLoadedDataErr=!1,vm.hasLoadedData=!0,vm.actionComplete=!1,vm.inprogress=!0,vm.isNameNotChange=!!vm.modalTableData.hasOwnProperty("title"),vm.modalType){case"merge":vm.title="Tables merging",vm.btnTxt="Merge",vm.notation="(should be different from initial)",vm.modalTableData.title&&(vm.mergeParams.tableName=vm.modalTableData.title),mergeColumns(vm.modalOperationData).then(function(res){console.log("merge",res),res&&isDataCorrect(res)?(vm.columns=res.columns,vm.rows=res.rows,vm.hasLoadedDataErr=!1):vm.hasLoadedDataErr=!0,vm.inprogress=!1,vm.hasLoadedData=!1});break;case"save":console.log(vm.modalOperationData),vm.title="Saving dataset",vm.btnTxt="Save",vm.notation="(should be different from initial)",vm.modalTableData.title&&(vm.mergeParams.tableName=vm.modalTableData.title),saveDataset(vm.modalOperationData).then(function(res){console.log("save",res),isDataCorrect(res)?(vm.columns=res.columns,vm.rows=res.rows,vm.hasLoadedDataErr=!1):vm.hasLoadedDataErr=!0,vm.inprogress=!1,vm.hasLoadedData=!1})}vm.submit=function(valid){function saveSuccess(){vm.actionComplete=!0,vm.hasLoadedData=!1,vm.infoText="Save complete"}if(valid){vm.inprogress=!0,vm.hasLoadedData=!0;var formData=getModalFormData();switch(vm.modalType){case"merge":vm.modalOperationData.params.title=formData.name,vm.modalOperationData.params.notice=formData.note,vm.modalOperationData.params.action="insert",mergeColumns(vm.modalOperationData).then(saveSuccess);break;case"save":var params=angular.extend(vm.modalOperationData,{title:formData.name,notice:formData.note});params.action="insert",saveDataset(params).then(saveSuccess)}}},vm.compareName=compareName,vm.ok=function(){$modalInstance.close(!0)},vm.cancel=function(){$modalInstance.dismiss(!1)}}]);
"use strict";angular.module("datasets").directive("datatableWrapper",["$timeout","$compile",function($timeout,$compile){function link(scope,element){$timeout(function(){$compile(element.find(".title-radio-label"))(scope),$compile(element.find(".title-checkbox-label"))(scope)},0,!1)}return{restrict:"E",transclude:!0,template:"<ng-transclude></ng-transclude>",link:link}}]).directive("labelRadio",function(){function link(scope,element){element.bind("click",function(event){event.stopPropagation(),event.preventDefault(),element.children().prop("checked",!0)})}return{restrict:"A",link:link}}).controller("WorkbenchController",["$scope","$stateParams","$timeout","$state","$modal","Datasets","UsersFactory","Authentication","DTOptionsBuilder","DTColumnDefBuilder",function($scope,$stateParams,$timeout,$state,$modal,Datasets,UsersFactory,Authentication,DTOptionsBuilder,DTColumnDefBuilder){function getDataset(container){var vmContainer=vm[container];vmContainer&&vmContainer._id&&(vmContainer.hasLoadedData=!1,vmContainer.hasLoadedDataIsFull=!1,vmContainer.checkedColumns=null,clearPrimaryCol(container),Datasets.crud.get({datasetId:vmContainer._id}).$promise.then(function(dataset){return vmContainer.data=dataset,dataset._id}).then(Datasets.getDatasetWithS3.bind(Datasets)).then(function(data){return!data||data&&data.hasOwnProperty("columns")&&!data.columns.length?(vmContainer.hasLoadedData=!0,!1):void $timeout(function(){vmContainer.columns=data.columns,vmContainer.rows=_.map(data.rows,function(row,i){for(var val in row)row.hasOwnProperty(val)&&row[val].match(/"/g)&&(row[val]=row[val].replace(/"/gi,""));return row}),vmContainer.tableColumnDefs=_.map(data.columns,function(col,i){col.match(/"/g)&&(col=col.replace(/"/gi,""));var text='<label class="title-radio-label"><input type="radio" class="title-radio" name="primaryCol_'+container+'" value="'+col+'" ng-model="Workbench.mergeParams.primaryCol.'+container+'">'+col+'</label><label class="title-checkbox-label"><input type="checkbox" class="title-checkbox" name="col_'+col+"_"+container+'" value="'+col+'" ng-model="Workbench.'+container+".checkedColumns."+col+'" ng-init="Workbench.'+container+".checkedColumns."+col+'=true"></label>';return DTColumnDefBuilder.newColumnDef(i).withTitle(text).notSortable()}),vmContainer.tableOptions=DTOptionsBuilder.newOptions().withOption("drawCallback",function(settings){var api=new $.fn.dataTable.Api(settings),$tabel=$(api.table().node());$tabel.find("label").remove()}).withOption("lengthChange",!1).withOption("sort",!1).withOption("paging",!1).withOption("scrollY","450px").withOption("scrollX","450px"),vmContainer.hasLoadedData=!0,vmContainer.hasLoadedDataIsFull=!0},100)}))}function checkMergeData(params,data){var err={msg:[]};switch(!0){case _.isEmpty(params):return err.msg.push("Please check merge parameters"),err;case"0"!==params.type&&"1"!==params.type:return err.msg.push("Please check merge type"),err;case!params.primaryTable:return err.msg.push("Please check primary table for merge"),err}for(var i=0;i<data.datasets.length;i++){var isError=!1;if(data.datasets[i].primary||(err.msg.push("Please check primary column in both tables"),isError=!0),data.datasets[i].cols.length<=1&&(err.msg.push("Please check columns for merge in both tables (min 2 checked columns in the each table)"),isError=!0),isError)return err}return!!err.msg.length&&err}function createDatasets(params,tables){var datasets=[];if(!_.isEmpty(params)){for(var tableName in tables)if(tables.hasOwnProperty(tableName)){var dataObj={id:tables[tableName],cols:checkedCol(tableName),primary:params.hasOwnProperty("primaryCol")&&params.primaryCol[tableName]};dataObj.primary&&dataObj.cols.length<=1&&dataObj.cols.indexOf(dataObj.primary)<0&&dataObj.cols.push(dataObj.primary),+dataObj.id===+tables[params.primaryTable]?datasets.splice(0,0,dataObj):datasets.push(dataObj)}return datasets}}function getUserDatasetById(id){return _.find(vm.usersDatasets,{_id:id})}function checkedCol(tableName){var checkedColumns=vm[tableName].checkedColumns,columns=[];for(var col in checkedColumns)checkedColumns.hasOwnProperty(col)&&checkedColumns[col]&&columns.push(col);return columns}function clearPrimaryCol(container){vm.mergeParams.hasOwnProperty("primaryCol")&&vm.mergeParams.primaryCol.hasOwnProperty(container)&&(vm.mergeParams.primaryCol[container]=null)}var vm=this;vm.authentication=Authentication,vm.user=Authentication.user,vm.mergeParams={},vm.checkedPriColumns={},vm.ds1={data:null,hasLoadedData:!1,checkedColumns:null,hasLoadedDataIsFull:!1,tableOptions:null,tableColumnDefs:[DTColumnDefBuilder.newColumnDef(0).notSortable()],_id:$stateParams.ds1},vm.ds2={data:null,checkedColumns:null,hasLoadedData:!1,hasLoadedDataIsFull:!1,tableOptions:null,tableColumnDefs:null,_id:$stateParams.ds2},vm.usersDatasets=[],$scope.$watch("$stateParams",function(newvalue){newvalue&&console.log(newvalue)}),UsersFactory.userData("datasets",vm.user.username).then(function(usersDatasets){vm.usersDatasets=usersDatasets}),getDataset("ds1"),getDataset("ds2"),vm.addtoUser=function(){Datasets.addToUserApiCall(vm.viewingDataset)},vm.loadDataset=function(container){vm[container]._id=vm[container].data._id,$state.go("datasets.workbench",{ds1:vm.ds1._id,ds2:vm.ds2._id},{location:"replace",reload:!1,notify:!1}),getDataset(container)},vm.saveChanges=function(tableData,container){var checkedColumns=vm[container].checkedColumns,columns=checkedCol(container);if(console.log(columns,checkedColumns,vm[container]),columns.length&&vm[container].columns.length>columns.length){var curDataset=getUserDatasetById(vm[container]._id),operationData={id:tableData._id,columns:columns,action:"show"};vm.showActionModal("save",{title:curDataset?curDataset.title:null},operationData)}else console.info("No data to send"),vm.showMessage({type:"alert",msg:["Not enought data to save dataset"]})},vm.showMessage=function(dataset){if(dataset){$modal.open({templateUrl:"modules/datasets/client/workbench/datasets.workbench.modal.html",controller:"DatasetsWorkbenchModalController",controllerAs:"DatasetWorkbenchModal",size:"md",resolve:{mergeData:dataset}})}},vm.showActionModal=function(type,tableData,operationData){$modal.open({templateUrl:"modules/datasets/client/workbench/action.workbench.modal.html",controller:"WorkbenchActionModalCtrl",controllerAs:"ActionModalCtrl",size:"lg",resolve:{modalData:{type:type,tableData:tableData,operationData:operationData}}})},vm.mergeColumns=function(){var params=vm.mergeParams,ids=window.location.pathname.split("/").slice(-2),tablesIds={ds1:ids[0],ds2:ids[1]},operationData={params:{type:+vm.mergeParams.type,action:"show"},datasets:createDatasets(params,tablesIds)},isErrObj=checkMergeData(params,operationData);if(isErrObj)return isErrObj.type="alert",void vm.showMessage(isErrObj);var curDataset=getUserDatasetById(operationData.datasets[0].id);vm.showActionModal("merge",{title:curDataset?curDataset.title:null},operationData)}}]);
"use strict";angular.module("datasets").controller("DatasetsWorkbenchModalController",["$modalInstance","mergeData",function($modalInstance,mergeData){var vm=this;vm.mergeData=mergeData,vm.msgType=mergeData.type,vm.isAlert=function(){return"alert"===vm.msgType||"info"!==vm.msgType&&void 0}(),vm.ok=function(){$modalInstance.close(!0)},vm.cancel=function(){$modalInstance.dismiss(!1)}}]);
!function(){"use strict";function menuConfig(Menus){}angular.module("models").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("models",{"abstract":!0,url:"/models",template:"<ui-view/>"}).state("models.list",{url:"",templateUrl:"modules/models/client/views/list-models.client.view.html",controller:"ModelsListController",controllerAs:"vm",data:{pageTitle:"Models List"}}).state("models.filter",{url:"/:field/:value",templateUrl:"modules/models/client/views/list-models.client.view.html",controller:"ModelsListController",controllerAs:"vm",data:{pageTitle:"Models List"}}).state("models.create",{url:"/create",templateUrl:"modules/models/client/views/form-model.client.view.html",controller:"ModelsController",controllerAs:"vm",resolve:{modelResolve:newModel},data:{roles:["user","admin"],pageTitle:"Models Create"}}).state("models.edit",{url:"/:modelId/edit",templateUrl:"modules/models/client/views/form-model.client.view.html",controller:"ModelsController",controllerAs:"vm",resolve:{modelResolve:getModel},data:{roles:["user","admin"],pageTitle:"Edit Model {{ modelResolve.name }}"}}).state("models.view",{url:"/:modelId",templateUrl:"modules/models/client/views/view-model.client.view.html",controller:"ModelsController",controllerAs:"vm",resolve:{modelResolve:getModel},data:{pageTitle:"Model {{ modelResolve.name }}"}})}function getModel($stateParams,ModelsService){return ModelsService.get({modelId:$stateParams.modelId}).$promise}function newModel(ModelsService){return new ModelsService}angular.module("models").config(routeConfig),routeConfig.$inject=["$stateProvider"],getModel.$inject=["$stateParams","ModelsService"],newModel.$inject=["ModelsService"]}();
!function(){"use strict";function ModelsListController($state,$stateParams,Models,ModelsService,UsersFactory){var vm=this;if(vm.resolved=!1,vm.loading=!1,vm.load=function(){vm.resolved=!1,vm.loading=!0},vm.loaded=function(){vm.resolved=!0,vm.loading=!1},vm.state=$state.current.name,vm.ownership=UsersFactory.ownership(),vm.query=function(){vm.load(),ModelsService.query().$promise.then(function(res){vm.loaded(),vm.list=res})},"models.filter"===$state.current.name){var field=$stateParams.field,value=$stateParams.value;vm.load(),Models.filter(field,value).then(function(models){vm.list=models,vm.loaded()},function(error){vm.loaded()})}else"users.profilepage.models"===$state.current.name&&(vm.load(),UsersFactory.userData("models",$stateParams.username).then(function(models){vm.list=models,vm.loaded()}))}angular.module("models").controller("ModelsListController",ModelsListController),ModelsListController.$inject=["$state","$stateParams","Models","ModelsService","UsersFactory"]}();
!function(){"use strict";function ModelsController($scope,$state,Authentication,model){function remove(){confirm("Are you sure you want to delete?")&&vm.model.$remove($state.go("models.list"))}function save(isValid){function successCallback(res){$state.go("models.view",{modelId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.model._id?vm.model.$update(successCallback,errorCallback):vm.model.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.modelForm"),!1)}var vm=this;vm.authentication=Authentication,vm.model=model,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("models").controller("ModelsController",ModelsController),ModelsController.$inject=["$scope","$state","Authentication","modelResolve"]}();
"use strict";angular.module("models").factory("Models",["$http",function($http){return{filter:function(field,value){return $http.get("api/models/"+field+"/"+value)}}}]);
!function(){"use strict";function ModelsService($resource){return $resource("api/models/:modelId",{modelId:"@_id"},{update:{method:"PUT"}})}angular.module("models").factory("ModelsService",ModelsService),ModelsService.$inject=["$resource"]}();
"use strict";angular.module("posts").run(["Menus","Authentication",function(Menus,Authentication){}]).constant("postOptions",{subjects:["finance","sports","social science"],access:["public","private","paid"]});
"use strict";angular.module("posts").config(["$stateProvider",function($stateProvider){var MODULE_PATH="modules/posts/client/";$stateProvider.state("posts",{"abstract":!0,url:"/posts",template:"<ui-view/>"}).state("posts.list",{url:"",controller:"postsListController",controllerAs:"postsList",templateUrl:MODULE_PATH+"list/posts.list.html"}).state("posts.search",{url:"/search/:field/:value",controller:"postsListController",controllerAs:"postsList",templateUrl:MODULE_PATH+"list/posts.list.html"}).state("posts.create",{url:"/create",controller:"postsCreateController",controllerAs:"postsCreate",templateUrl:MODULE_PATH+"create/posts.create.html",data:{roles:["user","admin"]}}).state("posts.detail",{url:"/:postId",controller:"postsDetailController",controllerAs:"postsDetail",templateUrl:MODULE_PATH+"detail/posts.detail.html"}).state("posts.edit",{url:"/:postId/edit",controller:"postsEditController",controllerAs:"postsEdit",templateUrl:MODULE_PATH+"edit/posts.edit.html",data:{roles:["user","admin"]}}).state("posts.createstep2",{url:"/:postId/create/step2",controller:"postsStep2Controller",controllerAs:"postsStep2",templateUrl:MODULE_PATH+"step2/posts.step2.html",data:{roles:["user","admin"]}}).state("posts.editstep2",{url:"/:postId/edit/step2",controller:"postsStep2Controller",controllerAs:"postsStep2",templateUrl:MODULE_PATH+"step2/posts.step2.html",data:{roles:["user","admin"]}})}]);
"use strict";angular.module("posts").controller("postsCreateController",["$scope","$state","Authentication","posts","postOptions","$uibModal","$window","$timeout","FileUploader","Models","Datasets","$log","toastr",function($scope,$state,Authentication,posts,postOptions,$uibModal,$window,$timeout,FileUploader,Models,Datasets,$log,toastr){var vm=this;vm.submitted=!1,vm.user=Authentication.user,vm.error=null,vm.postOptions=postOptions,vm.post={access:"public"},vm.step1=function(form){vm.submitted=!0,vm.error=null,form.$valid?posts.create(vm.post).then(function(response){toastr.success("Post created successfully, now you can attach datasets, models or .pdfs!"),$state.go("posts.createstep2",{postId:response._id})})["catch"](function(err){$log.error(err),toastr.error("An error occurred when trying to save the post. Please try again.")}):(toastr.error("Please fix the errors before you can continue."),$scope.$broadcast("show-errors-check-validity","form"))}}]);
"use strict";angular.module("posts").controller("postsDetailController",["$stateParams","Authentication","posts","$state","$log","Datasets","$modal","toastr",function($stateParams,Authentication,posts,$state,$log,Datasets,$modal,toastr){var vm=this;vm.tabs=[],vm.activeTab="",vm.notfound=!1,vm.authentication=Authentication,posts.crud.get({postId:$stateParams.postId}).$promise.then(function(response){vm.post=response,vm.post.datasets.length&&(vm.tabs.push("Datasets"),vm.activeTab=""===vm.activeTab?"Datasets":vm.activeTab),vm.post.models.length&&(vm.tabs.push("Models"),vm.activeTab=""===vm.activeTab?"Models":vm.activeTab),vm.post.files.length&&(vm.tabs.push("Files"),vm.activeTab=""===vm.activeTab?"Files":vm.activeTab)},function(err){$log.error(err),vm.notfound=!0}),vm.changeTab=function(tab){vm.activeTab=tab},vm.addToUser=function(dataset){Datasets.addToUserApiCall(dataset).then(function(data){toastr.success("Added dataset to your lab.")})["catch"](function(error){$log.error(error),toastr.error("An error occurred while adding dataset to your lab.")})},vm.showData=function(dataset){$modal.open({templateUrl:"modules/datasets/client/detail/datasets.detail.modal.html",controller:"DatasetsDetailModalController",controllerAs:"DatasetDetailModal",size:"md",resolve:{viewingDataset:dataset}})},vm.remove=function(){posts.crud.remove({postId:$stateParams.postId}).$promise.then(function(response){$state.go("users.profilepage.posts",{username:vm.authentication.user.username}),toastr.success("Post deleted successfully.")},function(err){vm.error=err.message,toastr.error("Error deleting post.")})}}]);
"use strict";angular.module("posts").controller("postsEditController",["$scope","$state","$stateParams","Authentication","posts","$uibModal","$window","$timeout","FileUploader","postOptions","Models","Datasets","$log","toastr",function($scope,$state,$stateParams,Authentication,posts,$uibModal,$window,$timeout,FileUploader,postOptions,Models,Datasets,$log,toastr){var vm=this;vm.user=Authentication.user,vm.submitted=!1,vm.error=null,vm.postOptions=postOptions,vm.post={},vm.get=function(){posts.crud.get({postId:$stateParams.postId}).$promise.then(function(res){vm.post=res},function(err){vm.error=err})},vm.get(),vm.update=function(form){vm.error=null,vm.submitted=!0,form.$valid?posts.crud.update({post:vm.post,postId:$stateParams.postId}).$promise.then(function(response){$state.go("posts.editstep2",{postId:response._id})},function(err){vm.error=err.message,toastr.error("An error occurred when trying to save the post. Please try again.")}):($scope.$broadcast("show-errors-check-validity","form"),toastr.error("Please fix the errors before you can continue."))}}]);
"use strict";angular.module("posts").controller("postsListController",["$scope","$stateParams","$state","Authentication","posts","UsersFactory","postOptions",function($scope,$stateParams,$state,Authentication,posts,UsersFactory,postOptions){var vm=this;vm.authentication=Authentication,vm.state=$state.current.name,vm.ownership=UsersFactory.ownership(),vm.showCreate="posts.list"==$state.current.name,vm.postLimit=10,vm.resolved=!1,vm.loading=!1,vm.load=function(){vm.resolved=!1,vm.loading=!0},vm.loaded=function(){vm.resolved=!0,vm.loading=!1},vm.getPosts=function(field,value){vm.load(),vm.list=[];var getPosts;field?(vm.field=field,vm.value=value,"title"!==vm.field&&(vm.query=""),getPosts=posts.search(field,value)):getPosts=posts.list(),getPosts.then(function(posts){vm.list=posts,vm.loaded()},function(err){vm.loaded()})},vm.search=function(){vm.field="title",vm.query?vm.getPosts(vm.field,vm.query):vm.getPosts()},"posts.list"===vm.state&&(vm.menuItems=postOptions.subjects,vm.field="subject"),"posts.search"===vm.state&&vm.getPosts($stateParams.field,$stateParams.value),"users.profilepage.posts"===vm.state&&(vm.load(),UsersFactory.userData("posts",$stateParams.username).then(function(res){vm.list=res,vm.loaded()})),"home"===vm.state&&(vm.postLimit=3,vm.menuItems=["trending","in the news","rising"],vm.getPosts("trending",vm.menuItems[0]))}]);
"use strict";angular.module("posts").factory("posts",["$resource","$http","$state","$q",function($resource,$http,$state,$q){var posts={};return posts.crud=function(){return $resource("api/posts/:postId",{postId:"@postId"},{update:{method:"PUT"}})}(),posts.create=function(content){var dfd=$q.defer();return $http.post("/api/posts",content).success(function(data,status,headers,config){dfd.resolve(data)}).error(function(data,status,headers,config){dfd.reject(data)}),dfd.promise},posts.list=function(){return $http.get("/api/posts").then(function(res){return res.data},function(err){return err.data})},posts.search=function(field,value){var search=field+"/"+value;return $http.get("/api/posts/search/"+search).then(function(res){return res.data},function(err){return err.data})},posts}]);
"use strict";angular.module("posts").controller("postsStep2Controller",["$scope","$state","$stateParams","Authentication","posts","$uibModal","$window","$timeout","FileUploader","postOptions","Models","Datasets","$log","toastr",function($scope,$state,$stateParams,Authentication,posts,$uibModal,$window,$timeout,FileUploader,postOptions,Models,Datasets,$log,toastr){var vm=this;vm.user=Authentication.user,vm.submitted=!1,vm.error=null,vm.postOptions=postOptions,vm.newPost="posts.createstep2"===$state.current.name,vm.activeTab="Datasets",vm.post={},vm.back=function(){$state.go("posts.edit",{postId:vm.post._id})},vm.get=function(){posts.crud.get({postId:$stateParams.postId}).$promise.then(function(res){vm.post=res,vm.post.files&&vm.post.files.length&&_.each(vm.post.files,function(file){var foundfile=_.find(vm.user.files,{_id:file._id});foundfile&&(vm.user.files=_.without(vm.user.files,foundfile))})},function(err){vm.error=err})},vm.get(),vm.update=function(form){vm.error=null,vm.submitted=!0,form.$valid?posts.crud.update({post:vm.post,postId:$stateParams.postId}).$promise.then(function(response){$state.go("posts.detail",{postId:response._id}),toastr.success("Post updated successfully.")},function(err){vm.error=err.message,toastr.error("An error occurred when trying to save the post. Please try again.")}):($scope.$broadcast("show-errors-check-validity","form"),toastr.error("Please fix the errors before you can continue."))},vm.addModel=function(model){vm.post.models||(vm.post.models=[]),vm.post.models.push(model)},vm.addDataset=function(dataset){vm.post.datasets||(vm.post.datasets=[]),vm.datasets=_.without(vm.datasets,dataset),vm.post.datasets.push(dataset)},vm.addExistingFile=function(existingFile){vm.post.files||(vm.post.files=[]),vm.user.files=_.without(vm.user.files,existingFile),vm.post.files.push(existingFile)},vm.removeDataset=function(dataset){vm.post.datasets=_.without(vm.post.datasets,dataset),vm.datasets.push(dataset)},vm.removeFile=function(file){vm.post.files=_.without(vm.post.files,file),vm.user.files.push(file)},$scope.uploader=new FileUploader({url:"api/users/files"}),$scope.uploader.onWhenAddingFileFailed=function(item,filter,options){toastr.error("Only files with the .pdf extension allowed.")},$scope.uploader.filters.push({name:"pdfFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|pdf|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(event){$timeout(function(){var pdfData={name:fileItem.file.name,file:event.target.result};$scope.upload(pdfData)},0)}}},$scope.upload=function(file){vm.success=vm.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue()},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){vm.success=!0,vm.post.files||(vm.post.files=[]),vm.post.files.push({name:response.file.name,_id:response.file._id}),$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),vm.error=response.message},Models.filter("user",Authentication.user._id).then(function(res){vm.models=res.data},function(error){}),Datasets.user(Authentication.user.username).then(function(res){vm.datasets=res.data,vm.post.datasets&&vm.post.datasets.length&&_.each(vm.post.datasets,function(dataset){var founddataset=_.find(vm.datasets,{_id:dataset._id});founddataset&&(vm.datasets=_.without(vm.datasets,founddataset))})},function(error){})}]);
"use strict";angular.module("process").config(["$stateProvider",function($stateProvider){var MODULE_PATH="modules/process/client/";$stateProvider.state("lab",{url:"/lab","abstract":!0,template:"<ui-view/>"}).state("lab.process",{url:"/process",controller:"ProcessMainController",controllerAs:"ProcessMain",templateUrl:MODULE_PATH+"main/process.main.html",params:{data:null}}).state("lab.process.popup",{url:"/:type",modal:!0,size:"lg",template:'<div ui-view="modal"></div>',resolve:{processService:"Process",usersDatasets:["processService",function(processService){return processService.getUsersDatasets()}],selectedDataset:["processService",function(processService){return processService.getSelectedDataset()}],process:["processService",function(processService){return processService.getSelectedProcess()}]},views:{"modal@":{templateUrl:MODULE_PATH+"modal/process.modal.html",controller:"ProcessModalController",controllerAs:"ProcessModal"}}}).state("lab.process.popup.taskoptions",{url:"/taskoptions",template:"<ui-view/>"}).state("lab.process.popup.taskoptions.merge",{url:"/merge",templateUrl:MODULE_PATH+"tasks/tasks.merge.html",controller:"MergeTaskOptionsController",controllerAs:"MergeTaskOptions",params:{options:{}}}).state("lab.process.popup.taskoptions.linearregression",{url:"/linearregression",templateUrl:MODULE_PATH+"tasks/tasks.linearregression.html",controller:"LROptionsController",controllerAs:"LROptions",params:{options:{}}})}]);
"use strict";angular.module("process").controller("ProcessMainController",["$state","$stateParams","$q","$uibModal","Datasets","UsersFactory","Authentication","Tasks","Process","Deployr",function($state,$stateParams,$q,$uibModal,Datasets,UsersFactory,Authentication,Tasks,Process,Deployr){function getDatasets(){UsersFactory.userData("datasets",vm.user.username).then(function(datasets){vm.usersDatasets=datasets,Process.setUsersDatasets(datasets)})}function getRowsFromResult(result,columns){return _.zip.apply(_,result[0].value.map(function(obj){return obj.value})).map(function(rowValues){var row={};return rowValues.forEach(function(rowValue,i){row[columns[i]]=rowValue}),row})}function process(dataset,tasks,deferred,results){return deferred||(deferred=$q.defer()),results||(results=[]),runningTask=Deployr.run(dataset,tasks[0]),runningTask.promise().then(function(res){var result=res.result.generatedObjects;if("dataset"===tasks[0].returnType){if(!result.length)return deferred.reject("one of the tasks returned empty dataset!");var _dataset={columns:result[0].value.map(function(obj){return obj.name})};if(_dataset.rows=getRowsFromResult(result,_dataset.columns),results.push(_dataset),"undefined"!=typeof tasks[1])return process(_dataset,_.drop(tasks),deferred,results)}else results.push(result);return deferred.resolve(results)}).error(function(error){deferred.reject(error)}),deferred.promise}var vm=this,runningTask=null;if(vm.alerts=[],vm.user=Authentication.user,vm.showLoader=!1,vm.showProcessLoader=!1,vm.selectedDataset="",vm.totalItems=0,vm.currentPage=1,vm.itemsPerPage=50,vm.origRows=[],vm.dataset={rows:[],columns:[]},vm.process=null,Process.getByUser(vm.user._id).then(function(processes){vm.usersProcesses=processes}),getDatasets(),vm.pageChanged=function(){vm.dataset.rows=_.chain(vm.origRows).slice(vm.itemsPerPage*(vm.currentPage-1)).take(vm.itemsPerPage).value()},vm.onDatasetChange=function(dataset,resetOptions){vm.dataset.rows=[],vm.dataset.columns=[],vm.origRows=[],resetOptions&&vm.process&&vm.process.tasks&&vm.process.tasks.forEach(function(task){task.datasetChanged&&task.datasetChanged(task.options)}),Process.setSelectedDataset(dataset),vm.selectedDataset=dataset.title,vm.showLoader=!0,Datasets.getDatasetWithS3(dataset._id).then(function(data){vm.showLoader=!1,vm.dataset.columns=data.columns,vm.origRows=data.rows,vm.totalItems=vm.origRows.length,vm.dataset.rows=_.take(vm.origRows,vm.itemsPerPage)})},$stateParams.data&&$stateParams.data.process){$stateParams.data.process.tasks.forEach(function(task){var originalTask=Tasks.getSubtaskByTitle(task.title);originalTask&&(task=_.extend(task,{script:originalTask.script,validate:originalTask.validate,datasetChanged:originalTask.datasetChanged}))}),"create"===$stateParams.data.type?Process.setSelectedProcess(_.extend($stateParams.data.process,{user:vm.user._id})):Process.setSelectedProcess(_.extend(Process.getSelectedProcess(),$stateParams.data.process)),vm.process=Process.getSelectedProcess();var selectedDataset=Process.getSelectedDataset();selectedDataset&&(vm.selectedDataset=selectedDataset.title,vm.onDatasetChange(selectedDataset))}$stateParams.data&&$stateParams.data.dataset&&vm.onDatasetChange($stateParams.data.dataset),vm.openModal=function(type){return vm.selectedDataset||!vm.dataset.rows.length&&!vm.dataset.columns.length?vm.selectedDataset?void $state.go("lab.process.popup",{type:type},{reload:"lab.process.popup"}):alert("Please select a datatset!"):alert("Please save the dataset before proceeding")},vm.onProcessChange=function(process){vm.process&&vm.process._id&&process._id&&vm.process._id===process._id||(vm.process=_.cloneDeep(process),vm.process.tasks=vm.process.tasks.map(function(task){var originalTask=Tasks.getSubtaskByTitle(task.title);return originalTask||task}),Process.setSelectedProcess(vm.process))},vm.saveProcess=function(){var process=_.clone(vm.process);process.tasks=process.tasks.map(function(task){return _.pick(task,["title","slug"])}),process._id?Process.update(process).then(function(process){alert("updated!");var index=_.findIndex(vm.usersProcesses,{_id:process._id});vm.usersProcesses[index]=process}):Process.create(process).then(function(process){alert("created!"),vm.usersProcesses.push(process)})},vm.performProcess=function(){var invalidTasks=vm.process.tasks.filter(function(task){return task.validate&&!task.validate(task.options)});return invalidTasks.length?alert("Please select the required options for the tasks present in the process!"):(vm.showProcessLoader=!0,void process(vm.dataset,vm.process.tasks.filter(function(task){return task.script})).then(function(results){var modalInstance=$uibModal.open({controller:"ModelModalController",controllerAs:"ModelModal",templateUrl:"modules/process/client/model/model.modal.html",size:"md",backdrop:!0,resolve:{selectedDataset:function(){return Process.getSelectedDataset()},tasks:function(){return vm.process.tasks},results:function(){return results}}});modalInstance.result.then(function(model){vm.alerts.push({type:"success",msg:"The result has been successfully saved!"}),getDatasets()})})["catch"](function(err){console.log("error",err),err instanceof Error&&alert(err.message||err)})["finally"](function(){vm.showProcessLoader=!1}))},vm.cancelProcess=function(){runningTask&&(runningTask.cancel(!0),runningTask=null)},vm.closeAlert=function(index){vm.alerts.splice(index,1)}}]);
"use strict";angular.module("process").controller("ProcessModalController",["$state","$stateParams","$timeout","Tasks","process",function($state,$stateParams,$timeout,Tasks,process){function updateTaskOptions(){if($state.params&&$state.params.options){var slug=$state.current.url.slice(1),task=_.find(vm.process.tasks,function(task){return task.slug===slug});task&&(task.options=$state.params.options)}}function showTaskOptions(task){task.slug?$state.go(baseStateUrl+"."+task.slug,{options:task.options}):$state.go("lab.process.popup")}var baseStateUrl="lab.process.popup.taskoptions",vm=this;vm.process=_.defaults("create"!==$stateParams.type?_.cloneDeep(process||{}):{},{title:"",tasks:[]}),vm.type=$stateParams.type,vm.tasks=Tasks.getTasks(),vm.tasks.forEach(function(task,i){task.status={open:0===i},task.subtasks.forEach(function(subtask){subtask.color=task.color})}),vm.process.tasks.forEach(function(task){task.returnType=_.compact(vm.tasks.map(function(_task){return _.find(_task.subtasks,{title:task.title})}))[0].returnType}),vm.showPlaceholderArrow=!0,vm.disableDrag=function(task){return _.find(vm.process.tasks,{title:task.title})},vm.onDrag=function(event,index,type){return $timeout(function(){vm.showPlaceholderArrow="dataset"===type},0),!("model"===type&&index<=vm.process.tasks.length-1||"model"===(_.last(vm.process.tasks)||{}).returnType&&index>=vm.process.tasks.length)},vm.onCopy=function(event,index,task){return _.find(vm.process.tasks,{title:task.title})||(updateTaskOptions(),vm.process.tasks.splice(index,0,task),showTaskOptions(vm.process.tasks[index])),!0},vm.onTaskClick=function(task){showTaskOptions(task)},vm.ok=function(){updateTaskOptions(),$state.go("lab.process",{data:{process:vm.process,type:$stateParams.type}},{reload:!0})},vm.cancel=function(){$state.go("lab.process",$stateParams)}}]);
"use strict";angular.module("process").controller("ModelModalController",["$uibModalInstance","$state","$stateParams","$q","Authentication","Datasets","Models","selectedDataset","tasks","results",function($uibModalInstance,$state,$stateParams,$q,Authentication,Datasets,Models,selectedDataset,tasks,results){function getDataset(){var deferred=$q.defer();return vm.dataset?Datasets.insert({selectedDataset:selectedDataset,title:vm.dataset.title,rows:vm.dataset.rows,columns:vm.dataset.columns}).then(function(dataset){deferred.resolve(dataset)},function(err){deferred.reject(err)}):deferred.resolve(selectedDataset._id),deferred.promise}var vm=this;vm.model=null,vm.dataset=null,vm.tasks=tasks,vm.saving=!1;var lastResult=_.last(results);Array.isArray(lastResult)?(vm.model={type:"Linear Regression",equation:"Some equation",output:lastResult},vm.dataset=_.last(_.dropRight(results))):vm.dataset=lastResult,vm.save=function(){vm.saving=!0,getDataset().then(function(dataset){return vm.model?Models.create({title:vm.model.title,type:vm.model.type,dataset:dataset._id,y:_.last(tasks).options.yColIndex,model:lastResult,user:Authentication.user._id,access:vm.model.access}):null}).then(function(model){$uibModalInstance.close(model)})["catch"](function(err){console.error("error saving model",err);var message="";err instanceof Error?message=err.message:err.data&&err.data.message&&(message=err.data.message),alert("Failed with error: "+(message||err))})["finally"](function(){vm.saving=!1})},vm.discard=function(){$uibModalInstance.dismiss()}}]);
"use strict";angular.module("process").factory("Deployr",["$q",function($q){var dBroker=rbroker.discreteTaskBroker({host:"http://52.73.208.190:7400",cors:!0,maxConcurrentTaskLimit:1,credentials:{username:"testuser",password:"cFYmFTBcwAPNPxCVvmas5W2b"}});return{run:function(dataset,task){return dBroker.submit(rbroker.discreteTask({filename:task.script.filename,directory:task.script.directory,author:"testuser",rinputs:task.script.rInputsFn(dataset.columns,dataset.rows,task.options),routputs:task.script.routputs}))},runExternal:function(task){},runCode:function(task){}}}]);
"use strict";angular.module("process").factory("Process",["$http",function($http){var currentProcess=null,selectedDataset=null,usersDatasets=null;return{setUsersDatasets:function(datasets){usersDatasets=datasets},getUsersDatasets:function(){return usersDatasets},setSelectedDataset:function(dataset){selectedDataset=dataset},getSelectedDataset:function(){return selectedDataset},setSelectedProcess:function(process){currentProcess=process},getSelectedProcess:function(){return currentProcess},getByUser:function(userId){return $http({url:"api/process/user/"+userId,method:"GET"}).then(function(res){return res.data},function(err){console.log(err)})},create:function(process){return $http({url:"api/process",method:"POST",data:{process:process}}).then(function(res){return res.data},function(err){console.log(err)})},update:function(process){return $http({url:"api/process/"+process._id,method:"PUT",data:{process:process}}).then(function(res){return res.data},function(err){console.log(err)})},remove:function(process){return $http({url:"api/process/"+process._id,method:"DELETE"}).then(function(res){return res.data},function(err){console.log(err)})}}}]);
"use strict";angular.module("process").factory("Tasks",[function(){var SCRIPT_TYPE={DEPLOYR:"deployr",CODE:"code",EXTERNAL:"external"},SCRIPT_RETURN_TYPE={DATASET:"dataset",MODEL:"model"},dataFrameInput=function(name,columns,rows){return rows=rows.filter(function(row){return _.every(columns.map(function(column){return row[column]}))}),[rbroker.RInput.dataframe(name,columns.map(function(column){return rbroker.RInput.characterVector(column,rows.map(function(row){return row[column].toString()}))}))]},tasks=[{title:"Summaries",color:"blue",subtasks:[]},{title:"Join",color:"green",subtasks:[{title:"Merge (Drag me)",slug:"merge",returnType:SCRIPT_RETURN_TYPE.DATASET,options:{dataset1:"",dataset2:"",dataset1Key:"",dataset2Key:"",mergeType:""}}]},{title:"Transforms",color:"yellow",subtasks:[{title:"Standardize dates",returnType:SCRIPT_RETURN_TYPE.DATASET},{title:"Sub-sample (rows)",returnType:SCRIPT_RETURN_TYPE.DATASET},{title:"Missing data imputation",returnType:SCRIPT_RETURN_TYPE.DATASET,validate:function(){return!0},script:{type:SCRIPT_TYPE.DEPLOYR,directory:"root",filename:"LRtest.R",rInputsFn:dataFrameInput.bind(null,"datasetwithNA"),routputs:["dataset"]}},{title:"Convert factors",returnType:SCRIPT_RETURN_TYPE.DATASET}]},{title:"Exploratory",color:"pink",subtasks:[{title:"PCA",returnType:SCRIPT_RETURN_TYPE.DATASET},{title:"K-means",returnType:SCRIPT_RETURN_TYPE.DATASET}]},{title:"Econometric",color:"orange",subtasks:[]},{title:"MODEL IT!",subtasks:[{title:"Linear Regression",slug:"linearregression",returnType:SCRIPT_RETURN_TYPE.MODEL,options:{yColIndex:""},validate:function(options){return!isNaN(parseInt(options.yColIndex))},datasetChanged:function(options){options.yColIndex=""},script:{type:SCRIPT_TYPE.DEPLOYR,directory:"root",filename:"LRtest6.R",rInputsFn:function(columns,rows,options){return[rbroker.RInput.numeric("Ycolindex",parseInt(options.yColIndex)+1)].concat(dataFrameInput("dataset",columns,rows))},routputs:["coefficients","interceptSE","x","xSE"]}}]}];return{SCRIPT_TYPE:SCRIPT_TYPE,SCRIPT_RETURN_TYPE:SCRIPT_RETURN_TYPE,getTasks:function(){return tasks},getSubtaskByTitle:function(title){return _.compact(tasks.map(function(task){return _.find(task.subtasks,{title:title})}))[0]}}}]);
"use strict";angular.module("process").controller("LROptionsController",["$stateParams","Datasets","selectedDataset",function($stateParams,Datasets,selectedDataset){var vm=this;vm.options=$stateParams.options||{},selectedDataset&&Datasets.getDatasetWithS3(selectedDataset._id).then(function(data){vm.columns=data.columns})}]);
"use strict";angular.module("process").controller("MergeTaskOptionsController",["$stateParams","Datasets","usersDatasets","selectedDataset",function($stateParams,Datasets,usersDatasets,selectedDataset){var vm=this;vm.options=$stateParams.options||{},vm.options.dataset1=selectedDataset,vm.usersDatasets=usersDatasets,vm.dataset1=selectedDataset,selectedDataset&&Datasets.getDatasetWithS3(vm.dataset1._id).then(function(data){vm.dataset1Keys=data.columns}),vm.onDatasetChange=function(){Datasets.getDatasetWithS3(vm.options.dataset2._id).then(function(data){vm.dataset2Keys=data.columns})},vm.options.dataset2&&vm.onDatasetChange()}]);
"use strict";angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]);
"use strict";angular.module("users").config(["$stateProvider",function($stateProvider){var MODULE_PATH="modules/users/client/";$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html",controller:"AuthenticationController"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html",controller:"AuthenticationController"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"}).state("users",{"abstract":!0,url:"/users",template:"<ui-view/>"}).state("users.list",{url:"",controller:"UsersListController",controllerAs:"UsersList",templateUrl:MODULE_PATH+"views/list/users.list.client.view.html"}).state("users.profilepage",{url:"/:username",controller:"UsersProfilePageController",controllerAs:"UsersProfilePage",templateUrl:MODULE_PATH+"views/profilepage/users.profilepage.client.view.html"}).state("users.profilepage.posts",{url:"/posts",controller:"postsListController",controllerAs:"postsList",templateUrl:"modules/posts/client/list/posts.list.html"}).state("users.profilepage.models",{url:"/models",controller:"ModelsListController",controllerAs:"vm",templateUrl:"modules/models/client/views/list-models.client.view.html"}).state("users.profilepage.datasets",{url:"/data",controller:"DatasetsListController",controllerAs:"DatasetsList",templateUrl:"modules/datasets/client/list/datasets.list.html"})}]);
"use strict";angular.module("users").controller("AuthenticationController",["$scope","$state","$stateParams","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$stateParams,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){console.log("gg"),$scope.error=response.message}):(console.log("hini"),$scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]);
"use strict";angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]);
"use strict";angular.module("users").controller("UsersListController",["$state","$sce","Authentication","Users","UsersFactory","toastr",function($state,$sce,Authentication,Users,UsersFactory,toastr){function loadSearchData(){UsersFactory.search(vm.q,vm.itemsPerPage,vm.currentPage).success(function(response){vm.users=response.users,vm.totalItems=response.count}).error(function(error){console.log(error)})}var vm=this;vm.authentication=Authentication,vm.totalItems=0,vm.currentPage=1,vm.itemsPerPage=50,vm.pageChanged=function(){loadSearchData()},vm.search=function(){return vm.q&&""!==vm.q?void loadSearchData():void toastr.error("You need to enter a value to search by.","Invalid input")},vm.showTitle=function(title){var q=vm.q,matcher=new RegExp(q,"gi"),highlightedTitle=title.replace(matcher,'<span class="matched">$&</span>');return console.log(highlightedTitle),$sce.trustAsHtml(highlightedTitle)}}]);
"use strict";angular.module("users").controller("UsersProfilePageController",["$state","$scope","$modal","$http","$location","$stateParams","$log","Users","UsersFactory","Authentication","Datasets",function($state,$scope,$modal,$http,$location,$stateParams,$log,Users,UsersFactory,Authentication,Datasets){var vm=this;vm.user=Authentication.user,vm.username=$stateParams.username,vm.params=$stateParams,vm.ownership=UsersFactory.ownership(),vm.isCurrentUser=vm.user.username===vm.username,vm.loading=!0,vm.founduser=!1,vm.menuItems=[{title:"Posts",state:"users.profilepage.posts({user: UsersProfilePage.params.username})"},{title:"Models",state:"users.profilepage.models({user: UsersProfilePage.params.username})"},{title:"Datasets",state:"users.profilepage.datasets({user: UsersProfilePage.params.username})"}],vm.isCurrentUser?(vm.founduser=!0,vm.loading=!1):UsersFactory.finduser($stateParams.username).then(function(user){user?(vm.externaluser=user,vm.founduser=!0,vm.loading=!1):vm.loading=!1},function(){vm.loading=!1}),vm.addToUser=function(dataset){Datasets.addToUserApiCall(dataset).then(function(data){console.log(data)})["catch"](function(error){console.log(error)})},vm.showEditModal=function(dataset){$modal.open({templateUrl:"modules/datasets/client/detail/datasets.detail.modal.html",controller:"DatasetsDetailModalController",controllerAs:"DatasetDetailModal",size:"lg",resolve:{viewingDataset:dataset,usersDatasets:function(){return angular.copy(vm.usersDatasets)}}})}}]);
"use strict";angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]);
"use strict";angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}}}]);
"use strict";angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}});
"use strict";angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]);
"use strict";angular.module("users").factory("PasswordValidator",["$window",function($window){var owasp=$window.owaspPasswordStrengthTest;return owasp.configs={minLength:6,minOptionalTestsToPass:1},owasp.tests.required=[],owasp.tests.optional=[function(password){if(!/[a-z]/.test(password))return"The password must contain at least one lowercase letter."},function(password){if(!/[A-Z]/.test(password))return"The password must contain at least one uppercase letter."},function(password){if(!/[0-9]/.test(password))return"The password must contain at least one number."}],{getResult:function(password){var result=owasp.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]);
"use strict";angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]);
"use strict";angular.module("users").factory("UsersFactory",["$resource","$http","$stateParams","$q","Authentication",function($resource,$http,$stateParams,$q,Authentication){function search(q,itemsPerPage,currentPage){return $http.get("api/users/search?q="+q+"&itemsPerPage="+itemsPerPage+"&currentPage="+currentPage)}function finduser(username){return $http({url:"api/users/"+username,method:"GET"}).then(function(res){return res.data})["catch"](function(err){console.log("error finding user",err)})}function finduserpromise(username){var dfd=$q.defer();return $http.get("api/users/"+username).success(function(data,status,headers,config){dfd.resolve(data)}).error(function(data,status,headers,config){dfd.reject(data)}),dfd.promise}function userData(model,username){return $http({url:"api/users/"+username+"/models/"+model,method:"GET"}).then(function(res){return console.log("userdata: ",res),res.data})["catch"](function(err){console.log("error finding user",err)})}function ownership(){return $stateParams.username===Authentication.user.username}return{search:search,finduser:finduser,finduserpromise:finduserpromise,userData:userData,ownership:ownership}}]);
"use strict";angular.module("admin.users").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]);
"use strict";angular.module("admin.users.routes").config(["$stateProvider",function($stateProvider){var MODULE_PATH="modules/admin/client/users/";$stateProvider.state("admin.users",{url:"/users",templateUrl:MODULE_PATH+"list/admin.users.list.html",controller:"AdminUserListController"}).state("admin.user",{"abstract":!0,url:"/users/:userId",template:"<ui-view/>",resolve:{User:["$stateParams","AdminUser",function($stateParams,AdminUser){return AdminUser.get({userId:$stateParams.userId})}]}}).state("admin.user.detail",{url:"",templateUrl:MODULE_PATH+"detail/admin.user.detail.html",controller:"AdminUserDetailController as AdminUserDetail"}).state("admin.user.edit",{url:"/edit",templateUrl:MODULE_PATH+"edit/admin.user.edit.html",controller:"AdminUserEditController as AdminUserEdit"})}]);
"use strict";angular.module("admin.users").controller("AdminUserDetailController",["$state","Authentication","User",function($state,Authentication,User){var vm=this;vm.authentication=Authentication,vm.user=User,vm.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1)):vm.user.$remove(function(){$state.go("admin.users")}))}}]);
"use strict";angular.module("admin.users").controller("AdminUserEditController",["$scope","$state","Authentication","User",function($scope,$state,Authentication,User){var vm=this;vm.authentication=Authentication,vm.user=User,vm.update=function(isValid){return isValid?void vm.user.$update(function(){$state.go("admin.user.detail",{userId:vm.user._id})},function(errorResponse){vm.error=errorResponse.data.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)}}]);
"use strict";angular.module("admin.users").controller("AdminUserListController",["$scope","$filter","AdminUser",function($scope,$filter,AdminUser){AdminUser.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]);
"use strict";angular.module("admin.users").factory("AdminUser",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);
"use strict";angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]);
"use strict";angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]);
"use strict";angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]);
"use strict";angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]);
"use strict";angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]);
"use strict";angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]);