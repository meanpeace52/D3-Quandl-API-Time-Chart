"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["angularFileUpload","angularMoment","ngAnimate","ngCookies","ngMessages","ngResource","LocalStorageModule","pascalprecht.translate","ui.bootstrap","ui.router","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();
"use strict";angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies).config(["$locationProvider","$httpProvider","$translateProvider",function($locationProvider,$httpProvider,$translateProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$translateProvider.useStaticFilesLoader({prefix:"/locales/",suffix:".json"}),$translateProvider.useLocalStorage().useSanitizeValueStrategy("escapeParameters").registerAvailableLanguageKeys(["en","nl","pt"],{en_US:"en",en_UK:"en",nl_BE:"nl",nl_NL:"nl",pt_BR:"pt",pt_PT:"pt"}).determinePreferredLanguage(),$httpProvider.interceptors.push("authInterceptor")}]).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data){var allowed=!1;toState.data.roles&&toState.data.roles.length>0&&toState.data.roles.forEach(function(role){if(void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(role)!==-1)return allowed=!0,!0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])});
"use strict";ApplicationConfiguration.registerModule("admin",["core"]),ApplicationConfiguration.registerModule("admin.artists",["core.admin"]),ApplicationConfiguration.registerModule("admin.artists.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("admin.paintings",["core.admin"]),ApplicationConfiguration.registerModule("admin.paintings.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("admin.users",["core.admin"]),ApplicationConfiguration.registerModule("admin.users.routes",["core.admin.routes"]);
"use strict";ApplicationConfiguration.registerModule("articles");
"use strict";ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]);
"use strict";ApplicationConfiguration.registerModule("datasets",["datatables"]);
!function(app){"use strict";app.registerModule("models")}(ApplicationConfiguration);
"use strict";ApplicationConfiguration.registerModule("posts");
"use strict";ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]);
"use strict";angular.module("articles").run(["Menus","Authentication",function(Menus,Authentication){Menus.addMenuItem("topbar",{title:"Articles",state:"articles.list"})}]);
"use strict";angular.module("articles").config(["$stateProvider",function($stateProvider){var MODULE_PATH="modules/articles/client/";$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",controller:"ArticlesListController",controllerAs:"ArticlesList",templateUrl:MODULE_PATH+"list/articles.list.html"}).state("articles.create",{url:"/create",controller:"ArticlesCreateController",controllerAs:"ArticlesCreate",templateUrl:MODULE_PATH+"create/articles.create.html",data:{roles:["user","admin"]}}).state("articles.detail",{url:"/:articleId",controller:"ArticlesDetailController",controllerAs:"ArticlesDetail",templateUrl:MODULE_PATH+"detail/articles.detail.html"}).state("articles.edit",{url:"/:articleId/edit",controller:"ArticlesEditController",controllerAs:"ArticlesEdit",templateUrl:MODULE_PATH+"edit/articles.edit.html",data:{roles:["user","admin"]}})}]);
"use strict";angular.module("articles").controller("ArticlesCreateController",["$scope","$state","Authentication","Articles",function($scope,$state,Authentication,Articles){var vm=this;vm.authentification=Authentication,vm.article=new Articles,vm.create=function(isValid){return vm.error=null,isValid?void vm.article.$save(function(response){$state.go("articles.detail",{articleId:response._id})},function(errorResponse){vm.error=errorResponse.data.message}):($scope.$broadcast("show-errors-check-validity","articleForm"),!1)}}]);
"use strict";angular.module("articles").controller("ArticlesDetailController",["$stateParams","Authentication","Articles",function($stateParams,Authentication,Articles){var vm=this;vm.authentication=Authentication,vm.article=Articles.get({articleId:$stateParams.articleId}),console.log(vm.authentication),console.log(vm.article)}]);
"use strict";angular.module("articles").controller("ArticlesEditController",["$scope","$state","$stateParams","Authentication","Articles",function($scope,$state,$stateParams,Authentication,Articles){var vm=this;vm.authentication=Authentication,vm.article=Articles.get({articleId:$stateParams.articleId}),vm.update=function(){vm.article.$update(function(){$state.go("articles.detail",{articleId:vm.article._id})},function(errorResponse){vm.error=errorResponse.data.message})}}]);
"use strict";angular.module("articles").controller("ArticlesListController",["$scope","$state","Authentication","Articles",function($scope,$state,Authentication,Articles){var vm=this;vm.authentication=Authentication,vm.articles=Articles.query()}]);
"use strict";angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]);
"use strict";angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]);
"use strict";angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]);
"use strict";angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("not-found"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html"})}]);
"use strict";!function(){var CarouselCtrl=function($scope){function assignNewIndexesToSlides(indexes){for(var i=0,l=slides.length;i<l;i++)slides[i].id=indexes.pop()}function generateIndexesArray(){for(var indexes=[],i=0;i<currIndex;++i)indexes[i]=i;return shuffle(indexes)}function shuffle(array){var tmp,current,top=array.length;if(top)for(;--top;)current=Math.floor(Math.random()*(top+1)),tmp=array[current],array[current]=array[top],array[top]=tmp;return array}var vm=this;vm.myInterval=5e3,vm.noWrapSlides=!1,vm.active=0;var slides=vm.slides=[],currIndex=0;vm.addSlide=function(){var newWidth=600+slides.length+1;slides.push({image:"http://lorempixel.com/"+newWidth+"/300",text:["Nice image","Awesome photograph","That is so cool","I love that"][slides.length%4],id:currIndex++})},vm.randomize=function(){var indexes=generateIndexesArray();assignNewIndexesToSlides(indexes)};for(var i=0;i<4;i++)vm.addSlide()};angular.module("core").controller("CarouselCtrl",["$scope",CarouselCtrl])}();
"use strict";angular.module("core").controller("HeaderController",["$rootScope","$scope","$state","Authentication","Menus",function($rootScope,$scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$rootScope.isToggleSideBar=!!$scope.authentication.user,$scope.toggleSideBar=function(){$rootScope.isToggleSideBar=!$rootScope.isToggleSideBar},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]);
"use strict";angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]);
"use strict";angular.module("core").controller("SideBarCtrl",["$rootScope","$scope","Authentication","Menus",function($rootScope,$scope,Authentication,Menus){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.sidebarMenu=Menus.getMenu("sidebar"),Menus.addMenuItem("sidebar",{title:"Lab",state:"datasets.list",type:"item",faIcon:"fa-flask",roles:["user"],position:0}),Menus.addMenuItem("sidebar",{title:"My Posts",state:"articles.list",faIcon:"fa-file",roles:["user"],position:1}),Menus.addMenuItem("sidebar",{title:"My Models",state:"home",faIcon:"fa-cogs",roles:["user"],position:3}),$scope.$watch(function(){return Authentication.user},function(newVal){newVal&&newVal.hasOwnProperty("username")&&($rootScope.isToggleSideBar=!0,Menus.removeMenuItem("sidebar","My Data"),Menus.addMenuItem("sidebar",{title:"My Data",state:'users.profilepage({ username: "'+newVal.username+'" })',faIcon:"fa-line-chart",roles:["user"],position:2}))})}]);
"use strict";!function(){var changeTheme=function(Authentication){return{restrict:"A",link:function(scope,element,attrs){var link=document.createElement("link");link.rel="stylesheet",angular.element("head").append(link),scope.$watch(function(){return Authentication.user},function(newValue){newValue?link.href="lib/startbootstrap-modern-business-1.0.5/css/modern-business.css":link.href="lib/startbootstrap-landing-page-1.0.5/css/landing-page.css"})}}};angular.module("core").directive("changeTheme",["Authentication",changeTheme])}();
"use strict";!function(){var isNeedContainer=function($rootScope,$window,$timeout){return{restrict:"A",link:function(scope,element,attrs){function toggleContainer(boolVal){boolVal?$timeout(function(){element.addClass("container-fluid").removeClass("container")},400):element.addClass("container").removeClass("container-fluid")}var curState="/"===$window.location.pathname?"home":$window.location.pathname,isToggle=!1;attrs.$observe("isNeedContainer",function(value){isToggle=value}),scope.$watch(function(){return $rootScope.isToggleSideBar},function(newValue){"toggle"!==isToggle&&"home"===curState||toggleContainer(newValue)}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){curState=toState.name,"home"===curState?element.attr("class",""):toggleContainer($rootScope.isToggleSideBar)})}}};angular.module("core").directive("isNeedContainer",["$rootScope","$window","$timeout",isNeedContainer])}();
"use strict";angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]);
"use strict";!function(){var toggleSidebar=function($rootScope,$window){return{restrict:"A",link:function(scope,element,attrs){scope.$watch(function(){return $rootScope.isToggleSideBar},function(newValue){newValue?element.addClass("toggled"):element.removeClass("toggled")}),scope.$watch(function(){return $window.innerWidth},function(newValue){newValue<768&&$rootScope.isToggleSideBar&&($rootScope.isToggleSideBar=!1,element.removeClass("toggled"))})}}};angular.module("core").directive("toggleSidebar",["$rootScope","$window",toggleSidebar])}();
"use strict";angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],faIcon:options.faIcon,roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]}),this.addMenu("sidebar",{roles:["user"]})}]);
"use strict";angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]);
"use strict";angular.module("datasets").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Datasets",state:"datasets.list"})}]);
"use strict";angular.module("datasets").config(["$stateProvider",function($stateProvider){var MODULE_PATH="modules/datasets/client/";$stateProvider.state("datasets",{"abstract":!0,url:"/datasets",template:"<ui-view/>"}).state("datasets.list",{url:"",controller:"DatasetsListController",controllerAs:"DatasetsList",templateUrl:MODULE_PATH+"list/datasets.list.html"}).state("datasets.create",{url:"/create",controller:"DatasetsCreateController",controllerAs:"DatasetsCreate",templateUrl:MODULE_PATH+"create/datasets.create.html",data:{roles:["user","admin"]}}).state("datasets.workbench",{url:"/workbench/:ds1/:ds2",controller:"WorkbenchController",controllerAs:"Workbench",templateUrl:MODULE_PATH+"workbench/datasets.workbench.html",params:{ds1:{squash:!0,value:null},ds2:{squash:!0,value:null}}}).state("datasets.detail",{url:"/:datasetId",controller:"DatasetsDetailController",controllerAs:"DatasetsDetail",templateUrl:MODULE_PATH+"detail/datasets.detail.html"}).state("datasets.edit",{url:"/:datasetId/edit",controller:"DatasetsEditController",controllerAs:"DatasetsEdit",templateUrl:MODULE_PATH+"edit/datasets.edit.html",data:{roles:["user","admin"]}})}]);
"use strict";angular.module("articles").controller("ArticlesCreateController",["$scope","$state","Authentication","Articles",function($scope,$state,Authentication,Articles){var vm=this;vm.authentification=Authentication,vm.article=new Articles,vm.create=function(isValid){return vm.error=null,isValid?void vm.article.$save(function(response){$state.go("articles.detail",{articleId:response._id})},function(errorResponse){vm.error=errorResponse.data.message}):($scope.$broadcast("show-errors-check-validity","articleForm"),!1)}}]);
"use strict";angular.module("datasets").controller("DatasetsDetailController",["$stateParams","Authentication","Datasets",function($stateParams,Authentication,Datasets){var vm=this;vm.authentication=Authentication,vm.dataset=Datasets.get({datasetId:$stateParams.datasetId}),console.log(vm.authentication),console.log(vm.dataset)}]);
"use strict";angular.module("datasets").controller("DatasetsDetailModalController",["$modalInstance","Datasets","viewingDataset",function($modalInstance,Datasets,viewingDataset){var vm=this;vm.viewingDataset=viewingDataset,vm.columns=[],vm.rows=[],vm.hasLoadedData=!1,Datasets.getDatasetWithS3(viewingDataset._id).then(function(data){vm.columns=data.columns,vm.rows=data.rows,vm.hasLoadedData=!0}),vm.ok=function(){$modalInstance.close(!0)},vm.cancel=function(){$modalInstance.dismiss(!1)},vm.addtoUser=function(){Datasets.addToUserApiCall(viewingDataset).then(function(dataset){$modalInstance.close(!0)})},vm.mergeDataset=function(){_.has(vm,"selectedDatasetOption")&&_.has(vm.selectedDatasetOption,"_id")?(vm.hasLoadedData=!1,Datasets.getDatasetWithS3(vm.selectedDatasetOption._id).then(function(data){vm.selectedDatasetColumns=data.columns,vm.selectedDatasetRows=data.rows,console.log(vm.selectedDatasetRows,vm.selectedDatasetColumns),vm.hasLoadedData=!0})):alert("select a valid dataset")}}]);
"use strict";angular.module("datasets").controller("DatasetsEditController",["$stateParams","Datasets","UsersFactory","Authentication",function($stateParams,Datasets,UsersFactory,Authentication){var vm=this;vm.authentication=Authentication,vm.user=Authentication.user,vm.viewingDataset={},vm.usersDatasets=[],vm.columns=[],vm.rows=[],vm.hasLoadedData=!1,UsersFactory.finduserdatasets(vm.user).then(function(usersDatasets){vm.usersDatasets=usersDatasets}),Datasets.crud.get({datasetId:$stateParams.datasetId}).$promise.then(function(dataset){return vm.viewingDataset=dataset,dataset._id}).then(Datasets.getDatasetWithS3.bind(Datasets)).then(function(data){vm.columns=data.columns,vm.rows=data.rows,vm.hasLoadedData=!0}),vm.addtoUser=function(){Datasets.addToUserApiCall(vm.viewingDataset)},vm.mergeDataset=function(){_.has(vm,"selectedDatasetOption")&&_.has(vm.selectedDatasetOption,"_id")?(vm.hasLoadedData=!1,Datasets.getDatasetWithS3(vm.selectedDatasetOption._id).then(function(data){vm.selectedDatasetColumns=data.columns,vm.selectedDatasetRows=data.rows,vm.hasLoadedData=!0})):alert("select a valid dataset")}}]);
"use strict";angular.module("datasets").controller("DatasetsListController",["$state","$sce","$modal","Authentication","Datasets",function($state,$sce,$modal,Authentication,Datasets){var vm=this;vm.authentication=Authentication,vm.loadingResults=!1,vm.search=function(){vm.loadingResults=!0,Datasets.search(vm.q).success(function(response){vm.searchResults=response,vm.loadingResults=!1}).error(function(error){console.log(error),vm.loadingResults=!1})},vm.showTitle=function(title){var q=vm.q,matcher=new RegExp(q,"gi"),highlightedTitle=title.replace(matcher,'<span class="matched">$&</span>');return $sce.trustAsHtml(highlightedTitle)},vm.addToUser=function(dataset){Datasets.addToUserApiCall(dataset).then(function(data){console.log(data)})["catch"](function(error){console.log(error)})},vm.showData=function(dataset){$modal.open({templateUrl:"modules/datasets/client/detail/datasets.detail.modal.html",controller:"DatasetsDetailModalController",controllerAs:"DatasetDetailModal",size:"md",resolve:{viewingDataset:dataset}})}}]);
"use strict";angular.module("datasets").factory("Datasets",["$resource","$http",function($resource,$http){function crud(){return $resource("api/datasets/:datasetId",{studentId:"@_id"},{update:{method:"PUT"}})}function search(q){return $http({url:"api/datasets/search?q="+q,method:"GET"})}function addToUserApiCall(dataset){return $http({url:"api/datasets",data:dataset,method:"POST"}).then(function(res){return console.log("done saving to user",res),res.data})["catch"](function(err){console.error("error saving to user",err)})}function getDatasetWithS3(datasetId){return $http({url:"api/datasets/"+datasetId+"/withs3",method:"GET"}).then(function(res){return res.data},function(err){console.error(err)})}function saveCustom(dataset){return $http({url:"/api/datasets/saveCustom",data:dataset,method:"POST"}).then(function(res){return res.data},function(err){console.log(err)})}function mergeColumns(data){return $http({url:"/api/datasets/merge",data:data,method:"POST"}).then(function(res){return res.data},function(err){console.error(err)})}return{crud:crud(),search:search,addToUserApiCall:addToUserApiCall,getDatasetWithS3:getDatasetWithS3,saveCustom:saveCustom,mergeColumns:mergeColumns}}]);
"use strict";angular.module("datasets").controller("WorkbenchActionModalCtrl",["$scope","$modalInstance","modalData","Datasets",function($scope,$modalInstance,modalData,Datasets){function compareName(){if(vm.modalTableData.title){var name=getModalFormData().name;vm.isNameNotChange=vm.modalTableData.title===name}}function getModalFormData(){return{name:vm.mergeParams.tableName?vm.mergeParams.tableName.replace(/<\/?[^>]+(>|$)/g,""):"",note:vm.mergeParams.hasOwnProperty("notes")?vm.mergeParams.notes.replace(/<\/?[^>]+(>|$)/g,""):""}}function mergeColumns(params){return Datasets.mergeColumns(params).then(function(data){return data})}function saveDataset(params){return Datasets.saveCustom(params).then(function(data){return console.log(data),data},function(err){console.warn(err)})}function isDataCorrect(data){return data.hasOwnProperty("columns")&&data.columns.length>0}var vm=this;switch(vm.actionForm=$scope.actionForm,vm.modalType=modalData.type,vm.modalTableData=modalData.tableData,vm.modalOperationData=modalData.operationData,vm.infoText="Table complete",vm.columns=[],vm.rows=[],vm.mergeParams={},vm.hasLoadedDataErr=!1,vm.hasLoadedData=!0,vm.actionComplete=!1,vm.inprogress=!0,vm.isNameNotChange=!!vm.modalTableData.hasOwnProperty("title"),vm.modalType){case"merge":vm.title="Tables merging",vm.btnTxt="Merge",vm.notation="(should be different from initial)",vm.modalTableData.title&&(vm.mergeParams.tableName=vm.modalTableData.title),mergeColumns(vm.modalOperationData).then(function(res){console.log("merge",res),res&&isDataCorrect(res)?(vm.columns=res.columns,vm.rows=res.rows,vm.hasLoadedDataErr=!1):vm.hasLoadedDataErr=!0,vm.inprogress=!1,vm.hasLoadedData=!1});break;case"save":console.log(vm.modalOperationData),vm.title="Saving dataset",vm.btnTxt="Save",vm.notation="(should be different from initial)",vm.modalTableData.title&&(vm.mergeParams.tableName=vm.modalTableData.title),saveDataset(vm.modalOperationData).then(function(res){console.log("save",res),isDataCorrect(res)?(vm.columns=res.columns,vm.rows=res.rows,vm.hasLoadedDataErr=!1):vm.hasLoadedDataErr=!0,vm.inprogress=!1,vm.hasLoadedData=!1})}vm.submit=function(valid){function saveSuccess(){vm.actionComplete=!0,vm.hasLoadedData=!1,vm.infoText="Save complete"}if(valid){vm.inprogress=!0,vm.hasLoadedData=!0;var formData=getModalFormData();switch(vm.modalType){case"merge":vm.modalOperationData.params.title=formData.name,vm.modalOperationData.params.notice=formData.note,vm.modalOperationData.params.action="insert",mergeColumns(vm.modalOperationData).then(saveSuccess);break;case"save":var params=angular.extend(vm.modalOperationData,{title:formData.name,notice:formData.note});params.action="insert",saveDataset(params).then(saveSuccess)}}},vm.compareName=compareName,vm.ok=function(){$modalInstance.close(!0)},vm.cancel=function(){$modalInstance.dismiss(!1)}}]);
"use strict";angular.module("datasets").directive("datatableWrapper",["$timeout","$compile",function($timeout,$compile){function link(scope,element){$timeout(function(){$compile(element.find(".title-radio-label"))(scope),$compile(element.find(".title-checkbox-label"))(scope)},0,!1)}return{restrict:"E",transclude:!0,template:"<ng-transclude></ng-transclude>",link:link}}]).directive("labelRadio",function(){function link(scope,element){element.bind("click",function(event){event.stopPropagation(),event.preventDefault(),element.children().prop("checked",!0)})}return{restrict:"A",link:link}}).controller("WorkbenchController",["$scope","$stateParams","$timeout","$state","$modal","Datasets","UsersFactory","Authentication","DTOptionsBuilder","DTColumnDefBuilder",function($scope,$stateParams,$timeout,$state,$modal,Datasets,UsersFactory,Authentication,DTOptionsBuilder,DTColumnDefBuilder){function getDataset(container){var vmContainer=vm[container];vmContainer&&vmContainer._id&&(vmContainer.hasLoadedData=!1,vmContainer.hasLoadedDataIsFull=!1,vmContainer.checkedColumns=null,clearPrimaryCol(container),Datasets.crud.get({datasetId:vmContainer._id}).$promise.then(function(dataset){return vmContainer.data=dataset,dataset._id}).then(Datasets.getDatasetWithS3.bind(Datasets)).then(function(data){return!data||data&&data.hasOwnProperty("columns")&&!data.columns.length?(vmContainer.hasLoadedData=!0,!1):void $timeout(function(){vmContainer.columns=data.columns,vmContainer.rows=_.map(data.rows,function(row,i){for(var val in row)row.hasOwnProperty(val)&&row[val].match(/"/g)&&(row[val]=row[val].replace(/"/gi,""));return row}),vmContainer.tableColumnDefs=_.map(data.columns,function(col,i){col.match(/"/g)&&(col=col.replace(/"/gi,""));var text='<label class="title-radio-label"><input type="radio" class="title-radio" name="primaryCol_'+container+'" value="'+col+'" ng-model="Workbench.mergeParams.primaryCol.'+container+'">'+col+'</label><label class="title-checkbox-label"><input type="checkbox" class="title-checkbox" name="col_'+col+"_"+container+'" value="'+col+'" ng-model="Workbench.'+container+".checkedColumns."+col+'" ng-init="Workbench.'+container+".checkedColumns."+col+'=true"></label>';return DTColumnDefBuilder.newColumnDef(i).withTitle(text).notSortable()}),vmContainer.tableOptions=DTOptionsBuilder.newOptions().withOption("drawCallback",function(settings){var api=new $.fn.dataTable.Api(settings),$tabel=$(api.table().node());$tabel.find("label").remove()}).withOption("lengthChange",!1).withOption("sort",!1).withOption("paging",!1).withOption("scrollY","450px").withOption("scrollX","450px"),vmContainer.hasLoadedData=!0,vmContainer.hasLoadedDataIsFull=!0},100)}))}function checkMergeData(params,data){var err={msg:[]};switch(!0){case _.isEmpty(params):return err.msg.push("Please check merge parameters"),err;case"0"!==params.type&&"1"!==params.type:return err.msg.push("Please check merge type"),err;case!params.primaryTable:return err.msg.push("Please check primary table for merge"),err}for(var i=0;i<data.datasets.length;i++){var isError=!1;if(data.datasets[i].primary||(err.msg.push("Please check primary column in both tables"),isError=!0),data.datasets[i].cols.length<=1&&(err.msg.push("Please check columns for merge in both tables (min 2 checked columns in the each table)"),isError=!0),isError)return err}return!!err.msg.length&&err}function createDatasets(params,tables){var datasets=[];if(!_.isEmpty(params)){for(var tableName in tables)if(tables.hasOwnProperty(tableName)){var dataObj={id:tables[tableName],cols:checkedCol(tableName),primary:params.hasOwnProperty("primaryCol")&&params.primaryCol[tableName]};dataObj.primary&&dataObj.cols.length<=1&&dataObj.cols.indexOf(dataObj.primary)<0&&dataObj.cols.push(dataObj.primary),+dataObj.id===+tables[params.primaryTable]?datasets.splice(0,0,dataObj):datasets.push(dataObj)}return datasets}}function getUserDatasetById(id){return _.find(vm.usersDatasets,{_id:id})}function checkedCol(tableName){var checkedColumns=vm[tableName].checkedColumns,columns=[];for(var col in checkedColumns)checkedColumns.hasOwnProperty(col)&&checkedColumns[col]&&columns.push(col);return columns}function clearPrimaryCol(container){vm.mergeParams.hasOwnProperty("primaryCol")&&vm.mergeParams.primaryCol.hasOwnProperty(container)&&(vm.mergeParams.primaryCol[container]=null)}var vm=this;vm.authentication=Authentication,vm.user=Authentication.user,vm.mergeParams={},vm.checkedPriColumns={},vm.ds1={data:null,hasLoadedData:!1,checkedColumns:null,hasLoadedDataIsFull:!1,tableOptions:null,tableColumnDefs:[DTColumnDefBuilder.newColumnDef(0).notSortable()],_id:$stateParams.ds1},vm.ds2={data:null,checkedColumns:null,hasLoadedData:!1,hasLoadedDataIsFull:!1,tableOptions:null,tableColumnDefs:null,_id:$stateParams.ds2},vm.usersDatasets=[],$scope.$watch("$stateParams",function(newvalue){newvalue&&console.log(newvalue)}),UsersFactory.finduserdatasets(vm.user).then(function(usersDatasets){vm.usersDatasets=usersDatasets}),getDataset("ds1"),getDataset("ds2"),vm.addtoUser=function(){Datasets.addToUserApiCall(vm.viewingDataset)},vm.loadDataset=function(container){vm[container]._id=vm[container].data._id,$state.go("datasets.workbench",{ds1:vm.ds1._id,ds2:vm.ds2._id},{location:"replace",reload:!1,notify:!1}),getDataset(container)},vm.saveChanges=function(tableData,container){var checkedColumns=vm[container].checkedColumns,columns=checkedCol(container);if(console.log(columns,checkedColumns,vm[container]),columns.length&&vm[container].columns.length>columns.length){var curDataset=getUserDatasetById(vm[container]._id),operationData={id:tableData._id,columns:columns,action:"show"};vm.showActionModal("save",{title:curDataset?curDataset.title:null},operationData)}else console.info("No data to send"),vm.showMessage({type:"alert",msg:["Not enought data to save dataset"]})},vm.showMessage=function(dataset){if(dataset){$modal.open({templateUrl:"modules/datasets/client/workbench/datasets.workbench.modal.html",controller:"DatasetsWorkbenchModalController",controllerAs:"DatasetWorkbenchModal",size:"md",resolve:{mergeData:dataset}})}},vm.showActionModal=function(type,tableData,operationData){$modal.open({templateUrl:"modules/datasets/client/workbench/action.workbench.modal.html",controller:"WorkbenchActionModalCtrl",controllerAs:"ActionModalCtrl",size:"lg",resolve:{modalData:{type:type,tableData:tableData,operationData:operationData}}})},vm.mergeColumns=function(){var params=vm.mergeParams,ids=window.location.pathname.split("/").slice(-2),tablesIds={ds1:ids[0],ds2:ids[1]},operationData={params:{type:+vm.mergeParams.type,action:"show"},datasets:createDatasets(params,tablesIds)},isErrObj=checkMergeData(params,operationData);if(isErrObj)return isErrObj.type="alert",void vm.showMessage(isErrObj);var curDataset=getUserDatasetById(operationData.datasets[0].id);vm.showActionModal("merge",{title:curDataset?curDataset.title:null},operationData)}}]);
"use strict";angular.module("datasets").controller("DatasetsWorkbenchModalController",["$modalInstance","mergeData",function($modalInstance,mergeData){var vm=this;vm.mergeData=mergeData,vm.msgType=mergeData.type,vm.isAlert=function(){return"alert"===vm.msgType||"info"!==vm.msgType&&void 0}(),vm.ok=function(){$modalInstance.close(!0)},vm.cancel=function(){$modalInstance.dismiss(!1)}}]);
!function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Models",state:"models.list"})}angular.module("models").run(menuConfig),menuConfig.$inject=["Menus"]}();
!function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("models",{"abstract":!0,url:"/models",template:"<ui-view/>"}).state("models.list",{url:"",templateUrl:"modules/models/client/views/list-models.client.view.html",controller:"ModelsListController",controllerAs:"vm",data:{pageTitle:"Models List"}}).state("models.create",{url:"/create",templateUrl:"modules/models/client/views/form-model.client.view.html",controller:"ModelsController",controllerAs:"vm",resolve:{modelResolve:newModel},data:{roles:["user","admin"],pageTitle:"Models Create"}}).state("models.edit",{url:"/:modelId/edit",templateUrl:"modules/models/client/views/form-model.client.view.html",controller:"ModelsController",controllerAs:"vm",resolve:{modelResolve:getModel},data:{roles:["user","admin"],pageTitle:"Edit Model {{ modelResolve.name }}"}}).state("models.view",{url:"/:modelId",templateUrl:"modules/models/client/views/view-model.client.view.html",controller:"ModelsController",controllerAs:"vm",resolve:{modelResolve:getModel},data:{pageTitle:"Model {{ articleResolve.name }}"}})}function getModel($stateParams,ModelsService){return ModelsService.get({modelId:$stateParams.modelId}).$promise}function newModel(ModelsService){return new ModelsService}angular.module("models").config(routeConfig),routeConfig.$inject=["$stateProvider"],getModel.$inject=["$stateParams","ModelsService"],newModel.$inject=["ModelsService"]}();
!function(){"use strict";function ModelsListController(ModelsService){var vm=this;vm.models=ModelsService.query()}angular.module("models").controller("ModelsListController",ModelsListController),ModelsListController.$inject=["ModelsService"]}();
!function(){"use strict";function ModelsController($scope,$state,Authentication,model){function remove(){confirm("Are you sure you want to delete?")&&vm.model.$remove($state.go("models.list"))}function save(isValid){function successCallback(res){$state.go("models.view",{modelId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.model._id?vm.model.$update(successCallback,errorCallback):vm.model.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.modelForm"),!1)}var vm=this;vm.authentication=Authentication,vm.model=model,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("models").controller("ModelsController",ModelsController),ModelsController.$inject=["$scope","$state","Authentication","modelResolve"]}();
!function(){"use strict";function ModelsService($resource){return $resource("api/models/:modelId",{modelId:"@_id"},{update:{method:"PUT"}})}angular.module("models").factory("ModelsService",ModelsService),ModelsService.$inject=["$resource"]}();
"use strict";angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]);
"use strict";angular.module("users").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Users",state:"users.list"})}]);
"use strict";angular.module("users").config(["$stateProvider",function($stateProvider){var MODULE_PATH="modules/users/client/";$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html",controller:"AuthenticationController"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html",controller:"AuthenticationController"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"}).state("users",{"abstract":!0,url:"/users",template:"<ui-view/>"}).state("users.list",{url:"",controller:"UsersListController",controllerAs:"UsersList",templateUrl:MODULE_PATH+"views/list/users.list.client.view.html"}).state("users.profilepage",{url:"/:username",controller:"UsersProfilePageController",controllerAs:"UsersProfilePage",templateUrl:MODULE_PATH+"views/profilepage/users.profilepage.client.view.html"})}]);
"use strict";angular.module("users").controller("AuthenticationController",["$scope","$state","$stateParams","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$stateParams,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){console.log("gg"),$scope.error=response.message}):(console.log("hini"),$scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]);
"use strict";angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]);
"use strict";angular.module("users").controller("UsersListController",["$state","$sce","Authentication","Users","UsersFactory",function($state,$sce,Authentication,Users,UsersFactory){var vm=this;vm.authentication=Authentication,vm.search=function(){UsersFactory.search(vm.q).success(function(response){vm.users=response}).error(function(error){console.log(error)})},vm.showTitle=function(title){var q=vm.q,matcher=new RegExp(q,"gi"),highlightedTitle=title.replace(matcher,'<span class="matched">$&</span>');return console.log(highlightedTitle),$sce.trustAsHtml(highlightedTitle)}}]);
"use strict";angular.module("users").controller("UsersProfilePageController",["$scope","$modal","$http","$location","$stateParams","Users","UsersFactory","Authentication","Datasets",function($scope,$modal,$http,$location,$stateParams,Users,UsersFactory,Authentication,Datasets){var vm=this;vm.authentication=Authentication,vm.user=Authentication.user,vm.usersData=[],vm.usersDatasets=[],vm.isCurrentUser=function(){return $stateParams.username===vm.user.username},UsersFactory.finduser($stateParams.username).then(function(user){return vm.userData=user,user}).then(UsersFactory.finduserdatasets.bind(UsersFactory)).then(function(usersDatasets){vm.usersDatasets=usersDatasets}),vm.addToUser=function(dataset){Datasets.addToUserApiCall(dataset).then(function(data){console.log(data)})["catch"](function(error){console.log(error)})},vm.showEditModal=function(dataset){$modal.open({templateUrl:"modules/datasets/client/detail/datasets.detail.modal.html",controller:"DatasetsDetailModalController",controllerAs:"DatasetDetailModal",size:"lg",resolve:{viewingDataset:dataset,usersDatasets:function(){return angular.copy(vm.usersDatasets)}}})}}]);
"use strict";angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]);
"use strict";angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}}}]);
"use strict";angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}});
"use strict";angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]);
"use strict";angular.module("users").factory("PasswordValidator",["$window",function($window){var owasp=$window.owaspPasswordStrengthTest;return owasp.configs={minLength:6,minOptionalTestsToPass:1},owasp.tests.required=[],owasp.tests.optional=[function(password){if(!/[a-z]/.test(password))return"The password must contain at least one lowercase letter."},function(password){if(!/[A-Z]/.test(password))return"The password must contain at least one uppercase letter."},function(password){if(!/[0-9]/.test(password))return"The password must contain at least one number."}],{getResult:function(password){var result=owasp.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]);
"use strict";angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]);
"use strict";angular.module("users").factory("UsersFactory",["$resource","$http",function($resource,$http){function search(q){return $http({url:"api/users/search?q="+q,method:"GET"})}function finduser(username){return $http({url:"api/users/"+username,method:"GET"}).then(function(res){return res.data})["catch"](function(err){console.log("error finding user",err)})}function finduserdatasets(user){return $http({url:"api/datasets/user/"+user.username,method:"GET"}).then(function(res){return res.data})["catch"](function(err){console.log("error finding user datasets",err)})}return{search:search,finduser:finduser,finduserdatasets:finduserdatasets}}]);
"use strict";angular.module("admin.users").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]);
"use strict";angular.module("admin.users.routes").config(["$stateProvider",function($stateProvider){var MODULE_PATH="modules/admin/client/users/";$stateProvider.state("admin.users",{url:"/users",templateUrl:MODULE_PATH+"list/admin.users.list.html",controller:"AdminUserListController"}).state("admin.user",{"abstract":!0,url:"/users/:userId",template:"<ui-view/>",resolve:{User:["$stateParams","AdminUser",function($stateParams,AdminUser){return AdminUser.get({userId:$stateParams.userId})}]}}).state("admin.user.detail",{url:"",templateUrl:MODULE_PATH+"detail/admin.user.detail.html",controller:"AdminUserDetailController as AdminUserDetail"}).state("admin.user.edit",{url:"/edit",templateUrl:MODULE_PATH+"edit/admin.user.edit.html",controller:"AdminUserEditController as AdminUserEdit"})}]);
"use strict";angular.module("admin.users").controller("AdminUserDetailController",["$state","Authentication","User",function($state,Authentication,User){var vm=this;vm.authentication=Authentication,vm.user=User,vm.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1)):vm.user.$remove(function(){$state.go("admin.users")}))}}]);
"use strict";angular.module("admin.users").controller("AdminUserEditController",["$scope","$state","Authentication","User",function($scope,$state,Authentication,User){var vm=this;vm.authentication=Authentication,vm.user=User,vm.update=function(isValid){return isValid?void vm.user.$update(function(){$state.go("admin.user.detail",{userId:vm.user._id})},function(errorResponse){vm.error=errorResponse.data.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)}}]);
"use strict";angular.module("admin.users").controller("AdminUserListController",["$scope","$filter","AdminUser",function($scope,$filter,AdminUser){AdminUser.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]);
"use strict";angular.module("admin.users").factory("AdminUser",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);
"use strict";angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]);
"use strict";angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]);
"use strict";angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]);
"use strict";angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]);
"use strict";angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]);
"use strict";angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]);